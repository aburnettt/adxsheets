{"version":3,"sources":["components/NavBar.jsx","components/BuyablePower.tsx","components/ManagePowersPanel.tsx","components/ManageArchPanel.tsx","components/InfoPanel.tsx","App.tsx","index.js"],"names":["NavBar","_ref","toggleManagePowers","toggleManageArch","react_default","a","createElement","className","Button","color","variant","onClick","BuyablePower","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","purchased","level","cost","setState","purchase","name","_this2","remainingCP","Number","majorCost","setPurchased","minorCost","lesserCost","React","Component","ManagePowersPanel","selectedPowers","totalCP","sp","powerData","forEach","power","Dialog","aria-describedby","aria-labelledby","fullWidth","onClose","handleClose","open","DialogTitle","DialogActions","onSubmit","handleConfirm","FormControl","required","map","row","i","BuyablePower_BuyablePower","key","purchasePower","ManageArchPanel","selectedArch","handleArchChange","bind","assertThisInitialized","handleLevelChange","event","target","value","sa","onChange","buildArchOptions","TextField","id","label","type","inputProps","min","max","step","Container","archData","arr","currentArch","push","InfoPanel","abilityList","buffList","Box","display","minHeight","width","position","style","TableContainer","component","Paper","Table","aria-label","abilities","TableBody","TableRow","TableCell","length","Tooltip","title","replaceAll","arrow","interactive","App","closePanels","showManagePowersPanel","showManageArchPanel","parsedAbilities","parsedBuffs","parsedArch","archName","window","localStorage","getItem","JSON","parse","fetch","then","r","text","csvToJson","parseData","_this3","components_NavBar","InfoPanel_InfoPanel","buffs","ManagePowersPanel_ManagePowersPanel","characterPoints","updateSelectedPowers","ManageArchPanel_ManageArchPanel","updateSelectedArch","lev","setItem","stringify","csv","lines","split","result","headers","obj","currentline","j","arguments","undefined","lesserRank","majorRank","minorRank","trainingPoints","willDice","val","rank","ability","action","dmg","atk","effect","detail","tags","condition","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.b11a3ff6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from '@material-ui/core';\n\n// Stateless Functional Component\n\nconst NavBar = ({ toggleManagePowers , toggleManageArch}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\">\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManagePowers}> Powers </Button>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManageArch}> Archetype/Level </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n    Button\n} from '@material-ui/core';\n\n\ninterface IProps {\n    name: string;\n    majorCost: number;\n    minorCost: number;\n    lesserCost: number;\n    purchase: any;\n    purchased: number;\n    remainingCP: number;\n}\n\ninterface IState {\n    purchased: number; //1-2-3 for lesser-minor-major. 0 is nothing\n}\n\nexport default class BuyablePower extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            purchased: this.props.purchased\n        };\n    }\n\n    setPurchased(level: number, cost: number) {\n        this.setState({\n            purchased: level\n        })\n        this.props.purchase(this.props.name, level, cost);\n    }\n\n    componentDidMount() {\n    }\n\n\n    render() {\n        if (this.state.purchased == 0) {\n            var remainingCP = Number(this.props.remainingCP); //weird bug makes me do this\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.props.majorCost > 0 &&\n                            this.props.majorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(3, this.props.majorCost)}>\n                                {this.props.majorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.minorCost > 0 &&\n                            this.props.minorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(2, this.props.minorCost)}>\n                                {this.props.minorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.lesserCost > 0 &&\n                            this.props.lesserCost <= remainingCP &&\n\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(1, this.props.lesserCost)}>\n                                {this.props.lesserCost} </Button>)}\n                    </td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.state.purchased == 3 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.majorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 2 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.minorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 1 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.lesserCost)}>\n                                X </Button>)}\n                    </td>\n                </tr>\n            )\n        }\n    }\n}","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\n\ninterface IProps {\n  powerData: any[];\n  totalCP: number;\n  selectedPowers: any;\n  handleConfirm: (selectedPowers: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedPowers: any;\n  remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedPowers: this.props.selectedPowers,\n      remainingCP: this.props.totalCP\n    };\n  }\n\n  componentDidMount() {\n    //calculate remaining CP based on all data\n    var remainingCP = this.props.totalCP;\n    var sp = this.props.selectedPowers;\n    this.props.powerData.forEach(power => {\n      if (sp[power[\"Power\"]]) {\n        switch (sp[power[\"Power\"]]) {\n          case 1:\n            remainingCP -= Number(power[\"Lesser\"]);\n            break;\n          case 2:\n            remainingCP -= Number(power[\"Minor\"]);\n            break;\n          case 3:\n            remainingCP -= Number(power[\"Major\"]);\n            break;\n          default:\n            return;\n        }\n      }\n    });\n    this.setState({\n      remainingCP: remainingCP\n    });\n  }\n\n  render() {\n    return (\n      <Dialog\n        aria-describedby=\"Manage Powers\"\n        aria-labelledby=\"Manage Powers\"\n        className=\"manage-powers-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Powers</DialogTitle>\n\n        <DialogActions>\n          <form onSubmit={(selectedPowers: any) => this.props.handleConfirm(this.state.selectedPowers)} >\n            <FormControl required variant=\"outlined\">\n              Remaining CP: {this.state.remainingCP}\n\n\n              {/*\n                </FormControl>\n                <FormControl className=\"inputControl\">\n              */}\n              <table><thead><tr><th>Power</th><th>Major</th><th>Minor</th><th>Lesser</th></tr></thead>\n                <tbody>\n                  {this.props.powerData && this.props.powerData.map((row: any[string], i) => {\n                    if (row[\"Major\"] || row[\"Minor\"] || row[\"Lesser\"]) {\n                      //buyable power\n                      return (\n                        <BuyablePower\n                          key={i}\n                          name={row[\"Power\"]}\n                          majorCost={row[\"Major\"]}\n                          minorCost={row[\"Minor\"]}\n                          lesserCost={row[\"Lesser\"]}\n                          purchase={(name: string, level: number, cost: number) => this.purchasePower(name, level, cost)}\n                          purchased={this.state.selectedPowers[row[\"Power\"]] ? this.state.selectedPowers[row[\"Power\"]] : 0}\n                          remainingCP={this.state.remainingCP}\n                        />\n                      )\n                    }\n                  })}\n                </tbody>\n              </table>\n\n            </FormControl>\n            <div className=\"actionButtons\">\n              <Button onClick={() => this.props.handleConfirm(this.state.selectedPowers)} color=\"primary\">Save</Button>\n              <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n            </div>\n          </form>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  public purchasePower(name: string, level: number, cost: number) {\n    this.state.selectedPowers[name] = level;\n    this.setState({\n      //bug since this is done async\n      remainingCP: this.state.remainingCP - cost\n    })\n  }\n\n}\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  TextField,\n  FormControl,\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\ninterface IProps {\n  archData: any[];\n  selectedArch: string | null;\n  level: number | null;\n  handleConfirm: (selectedArch: string, level: number) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedArch: string;\n  level: number;\n}\n\nexport default class ManageArchPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedArch: this.props.selectedArch ? this.props.selectedArch : \"Standard\",\n      level: this.props.level ? this.props.level : 1\n    };\n\n    this.handleArchChange = this.handleArchChange.bind(this);\n    this.handleLevelChange = this.handleLevelChange.bind(this);\n  }\n  componentDidMount() {\n\n  }\n  handleArchChange(event: any) {\n    this.setState({ selectedArch: event.target.value });\n  }\n\n  handleLevelChange(event: any) {\n    this.setState({ level: Number(event.target.value) });\n  }\n\n  render() {\n    //build output panel\n    var output = [];\n    var level = this.state.level;\n    var sa = this.state.selectedArch;\n    var currentArch: string = \"\";\n    return (\n      <Dialog\n        aria-describedby=\"Manage Archetype\"\n        aria-labelledby=\"Manage Archetype\"\n        className=\"manage-arch-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Archetype</DialogTitle>\n\n        <DialogActions>\n          <FormControl required variant=\"outlined\">\n            <select value={this.state.selectedArch}\n              onChange={this.handleArchChange} >\n              {this.buildArchOptions()}\n            </select>\n            <TextField\n              id=\"level-input\"\n              label=\"Level\"\n              type=\"number\"\n              value={this.state.level ? this.state.level : 1}\n              inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n              onChange={this.handleLevelChange}\n              className=\"level-control\"\n            />\n            {/*Output data about the current selection*/}\n            <Container>\n              <table>\n                <tbody>\n                  {this.props.archData.map((row, i) => {\n                    if (row[\"Arch\"] === sa) {\n                      return (<tr>\n                        <td>{row[\"Row\"]}:</td>\n                        <td>{row[\"Level \" + level]}</td>\n                      </tr>);\n                    }\n                  })\n                  }\n                </tbody>\n              </table>\n            </Container>\n          </FormControl>\n          <div className=\"actionButtons\">\n            <Button onClick={() => this.props.handleConfirm(this.state.selectedArch, this.state.level)} color=\"primary\">Save</Button>\n            <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n          </div>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  buildArchOptions() {\n    var arr: any[] = [];\n    var currentArch = \"\";\n    this.props.archData.forEach(row => {\n      if (row[\"Arch\"] && row[\"Arch\"] !== currentArch) {\n        //new row\n        currentArch = row[\"Arch\"];\n        arr.push(\n          <option\n            value={currentArch}>\n            {currentArch}\n          </option>\n        );\n      }\n    })\n    return arr;\n  }\n\n\n\n}\n","import React from 'react';\nimport {\n    Tooltip,\n    Button,\n    Box\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\n\ninterface IProps {\n    abilities: any[]\n    buffs: any[]\n}\n\ninterface IState {\n\n}\n\nexport default class InfoPanel extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            abilityList: [],\n            buffList: []\n        };\n    }\n\n\n    render() {\n\n\n\n\n        var abilityHeaders: string[] = [\n            \"Action\",\n            \"Atk\",\n            \"Effect\"\n        ]\n\n        return (\n            <Box display=\"flex\">\n                <Box minHeight=\"25%\" width=\"30%\" position=\"Left\" display=\"flex\">\n                    <div style={{ width: '500px' }}>\n                        <h3>Attributes</h3>\n                    </div>\n                </Box>\n                <Box minHeight=\"25%\" width=\"65%\" position=\"right\" display=\"flex\">\n                    <div style={{ width: '800px' }}>\n                        <h3> Abilities</h3>\n\n                        <TableContainer component={Paper}>\n                            <Table aria-label=\"simple table\">\n                                {/*\n                                Looks better without header IMO\n                                <TableHead>\n                                    <TableRow>\n                                        {abilityHeaders.map((header, i) => {\n                                            return (<TableCell><strong>{header}</strong></TableCell>)\n                                        })}\n\n                                    </TableRow>\n                                </TableHead>\n                                    */}\n                                {this.props.abilities.map((a, i) => {\n                                    return (<TableBody>\n                                        <TableRow><strong>{a[\"name\"]}</strong></TableRow>\n                                        <TableRow>\n                                            <TableCell>\n                                                {a[\"action\"]}\n                                            </TableCell>\n                                            <TableCell>\n                                                {a[\"atk\"]}\n                                            </TableCell>\n                                            <TableCell>\n                                                 {a[\"dmg\"] + \" \" + a[\"effect\"]} \n                                                {a[\"detail\"] && a[\"detail\"].length > 0 && (\n                                                    <Tooltip title={a[\"detail\"].replaceAll(\"\\\"\", \"\")} arrow interactive>\n                                                        <Button>(?)</Button>\n                                                    </Tooltip>\n                                                )}\n                                            </TableCell>\n                                        </TableRow></TableBody>)\n                                })}\n                            </Table>\n                        </TableContainer>\n\n                    </div>\n                </Box>\n            </Box >\n        )\n    }\n\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport ManageArchPanel from \"./components/ManageArchPanel\";\n\nimport InfoPanel from \"./components/InfoPanel\";\nimport { stringNumberComparer } from \"@material-ui/data-grid\";\n\ninterface IArch {\n  name: string\n  level: number\n  lesserRank: number\n  minorRank: number\n  majorRank: number\n  characterPoints: number\n  trainingPoints: number\n  willDice: number\n}\n\ninterface IState {\n  showManagePowersPanel: boolean\n  showManageArchPanel: boolean\n  selectedPowers: any\n  selectedArch: string\n  level: number\n  powerData: any[]\n  archData: any[]\n  parsedAbilities: any[]\n  parsedBuffs: any[]\n  parsedArch: IArch | null\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      showManagePowersPanel: false,\n      showManageArchPanel: false,\n      selectedPowers: {},\n      selectedArch: \"\",\n      level: 1,\n      powerData: [],\n      archData: [],\n      parsedAbilities: [],\n      parsedBuffs: [],\n      parsedArch: null\n    }\n\n  }\n\n  componentDidMount() {\n    let archName = window.localStorage.getItem(\"selectedArch\");\n    let level = window.localStorage.getItem(\"level\");\n    let sp = window.localStorage.getItem(\"selectedPowers\");\n\n    if (archName) {\n      this.setState({\n        selectedArch: archName\n      })\n    }\n    if (level) {\n      this.setState({\n        level: JSON.parse(level)\n      })\n    }\n    if (sp) {\n      this.setState({\n        selectedPowers: JSON.parse(sp)\n      })\n    }\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/powers.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          powerData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/arch.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          archData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.archData !== [] &&\n          this.state.powerData !== [] && (\n            <NavBar\n              toggleManagePowers={\n                this.showManagePowersPanel\n              }\n              toggleManageArch={\n                this.showManageArchPanel\n              }\n            />\n          )}\n        <main className=\"container\">\n          {this.state.selectedArch == \"\" ? (<strong>Select an Archetype</strong>) :\n            (<InfoPanel\n              abilities={this.state.parsedAbilities}\n              buffs={this.state.parsedBuffs}\n            />)}\n        </main>\n        {\n          this.state.showManagePowersPanel &&\n          this.state.parsedArch &&\n          (<ManagePowersPanel\n            powerData={this.state.powerData}\n            selectedPowers={this.state.selectedPowers}\n            totalCP={this.state.parsedArch.characterPoints}\n            handleConfirm={(selectedPowers: any) =>\n              this.updateSelectedPowers(selectedPowers)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)}\n        {\n          this.state.showManageArchPanel &&\n          (<ManageArchPanel\n            archData={this.state.archData}\n            selectedArch={this.state.selectedArch}\n            level={this.state.parsedArch ? this.state.parsedArch.level : 1}\n            handleConfirm={(name: string, level: number) =>\n              this.updateSelectedArch(name, level)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)\n        }\n      </div >\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false,\n      showManageArchPanel: false\n    })\n  }\n\n  updateSelectedArch(name: string, lev: number) {\n    this.setState({\n      selectedArch: name,\n      level: lev\n    })\n    window.localStorage.setItem(\"selectedArch\", name);\n    window.localStorage.setItem(\"level\", JSON.stringify(lev));\n    this.parseData(this.state.selectedPowers, name, lev);\n    this.closePanels();\n  }\n\n  updateSelectedPowers(selectedPowers: any) {\n    this.setState({\n      selectedPowers: selectedPowers\n    })\n    window.localStorage.setItem(\"selectedPowers\", JSON.stringify(selectedPowers));\n    this.parseData(selectedPowers);\n    this.closePanels();\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n  showManageArchPanel = () => {\n    this.setState({\n      showManageArchPanel: true\n    }\n    );\n  }\n\n  //var csv is the CSV file with headers\n  public csvToJson(csv: string) {\n\n    var lines = csv.split(\"\\r\\n\");\n\n    var result = [];\n\n    //todo would be nice to support commas in data\n    //by skipping escaped commas\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n\n    }\n\n    return result;\n    //return JSON.stringify(result); //JSON\n  }\n\n\n\n  private parseData(sp: any = this.state.selectedPowers, selectedArch: string = this.state.selectedArch, level: number = this.state.level) {\n    if (selectedArch === \"\" ||\n      level === 0 ||\n      this.state.archData === [] ||\n      this.state.powerData === []\n    ) {\n      return;\n    }\n\n    var parsedArch: IArch = {\n      characterPoints: 0,\n      lesserRank: 0,\n      level: level,\n      majorRank: 0,\n      minorRank: 0,\n      name: selectedArch,\n      trainingPoints: 0,\n      willDice: 0\n    }\n\n    this.state.archData.forEach(function (row) {\n      if (row[\"Arch\"] === selectedArch) {\n        var val = row[\"Level \" + level];\n        var detail = row[\"Detail\"];\n        //todo - add detail to parsedArch\n        switch (row[\"Row\"]) {\n          case \"CP\":\n            parsedArch.characterPoints = val;\n            break;\n          case \"TP\":\n            parsedArch.trainingPoints = val;\n            break;\n          case \"Major\":\n            parsedArch.majorRank = val;\n            break;\n          case \"Minor\":\n            parsedArch.minorRank = val;\n            break;\n          case \"Lesser\":\n            parsedArch.lesserRank = val;\n            break;\n          case \"Will Dice\":\n            parsedArch.willDice = val;\n            break;\n          default:\n          //do nothing\n        }\n      }\n    });\n\n    var abilities: any[] = [];\n    var buffs: any[] = [];\n    //todo - get Powers to give you the appropriate abilities and buffs\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0 &&\n        parsedArch) {\n        var rank = 0;\n        switch (sp[power[\"Power\"]]) {\n          case 1:\n            rank = parsedArch.lesserRank;\n            break;\n          case 2:\n            rank = parsedArch.minorRank;\n            break;\n          case 3:\n            rank = parsedArch.majorRank;\n            break;\n          default:\n            //do nothing\n            break;\n        }\n        if (power[\"Row\"] === \"Ability\") {\n          var ability = {\n            \"name\": power[\"Power\"],\n            \"action\": power[\"Action\"],\n            \"dmg\": power[\"r\" + rank],\n            \"atk\": \"1d20\",\n            \"effect\": power[\"Effect\"],\n            \"detail\": power[\"Detail\"],\n            \"tags\": power[\"Tags\"].split(\" \"),\n            \"condition\": power[\"Condition\"]\n          };\n\n          abilities.push(ability);\n        } else if (power[\"row\"] === \"Buff\") {\n          //todo\n        }\n      }\n    });\n\n    //todo - apply buffs\n\n    this.setState({\n      parsedAbilities: abilities,\n      parsedBuffs: buffs,\n      parsedArch: parsedArch\n    })\n\n\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}