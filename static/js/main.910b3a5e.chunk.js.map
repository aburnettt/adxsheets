{"version":3,"sources":["components/NavBar.jsx","components/BuyablePower.tsx","components/ManagePowersPanel.tsx","components/ManageArchPanel.tsx","components/ManageStatsPanel.tsx","components/InfoPanel.tsx","components/Buff.tsx","components/Ability.tsx","components/Natural.tsx","App.tsx","index.js"],"names":["NavBar","toggleManagePowers","toggleManageArch","toggleManageStats","className","padding","Button","color","variant","onClick","BuyablePower","React","Component","constructor","props","super","this","state","purchased","setPurchased","level","cost","setState","purchase","name","componentDidMount","render","remainingCP","Number","majorCost","minorCost","lesserCost","ManagePowersPanel","selectedPowers","totalCP","sp","powerData","forEach","power","Dialog","aria-describedby","aria-labelledby","fullWidth","onClose","handleClose","open","DialogTitle","DialogActions","onSubmit","handleConfirm","FormControl","required","map","row","i","purchasePower","ManageArchPanel","selectedArch","handleArchChange","bind","handleLevelChange","event","target","value","sa","onChange","buildArchOptions","TextField","id","label","type","inputProps","min","max","step","Container","archData","arr","currentArch","push","ManageStatsPanel","Object","keys","selectedStats","length","statData","stat","handleStatChange","ss","JSON","parse","stringify","rank","Fragment","e","col","startsWith","InfoPanel","Box","display","minHeight","width","position","style","naturals","n","buffs","b","TableContainer","Table","aria-label","abilities","a","Buff","tags","includes","text","effect","condition","byline","source","backgroundColor","renderAsBuffline","abilityName","TableRow","TableCell","appliesTo","getName","getTags","applies","myTag","otherTag","getValue","getEffect","Ability","TableBody","action","getPriority","detail","Tooltip","title","replaceAll","arrow","interactive","buff","modifier","test","console","log","returnModifiedValue","addBuff","Natural","App","closePanels","showManagePowersPanel","showManageArchPanel","showManageStatsPanel","getRank","parsedArch","tier","lesserRank","minorRank","majorRank","arch","archName","window","localStorage","getItem","fetch","then","r","csvToJson","parseData","characterPoints","updateSelectedPowers","updateSelectedArch","updateSelectedStats","lev","setItem","alert","csv","lines","split","result","headers","obj","currentline","j","trainingPoints","willDice","val","statName","nameToColor","tryOnBuff","tag","h","l","charCodeAt","code","Math","abs","toString","round","parseInt","substr","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.910b3a5e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from '@material-ui/core';\n\n// Stateless Functional Component\n\nconst NavBar = ({ toggleManagePowers , toggleManageArch, toggleManageStats}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\" padding=\"normal\">\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManagePowers}>Powers</Button> \n          &nbsp;\n          <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManageArch}>Archetype/Level</Button>\n                    &nbsp;\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManageStats}>Stats</Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n    Button\n} from '@material-ui/core';\n\n\ninterface IProps {\n    name: string;\n    majorCost: number;\n    minorCost: number;\n    lesserCost: number;\n    purchase: any;\n    purchased: number;\n    remainingCP: number;\n}\n\ninterface IState {\n    purchased: number; //1-2-3 for lesser-minor-major. 0 is nothing\n}\n\nexport default class BuyablePower extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            purchased: this.props.purchased\n        };\n    }\n\n    setPurchased(level: number, cost: number) {\n        this.setState({\n            purchased: level\n        })\n        this.props.purchase(this.props.name, level, cost);\n    }\n\n    componentDidMount() {\n    }\n\n\n    render() {\n        if (this.state.purchased == 0) {\n            var remainingCP = Number(this.props.remainingCP); //weird bug makes me do this\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.props.majorCost > 0 &&\n                            this.props.majorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(3, this.props.majorCost)}>\n                                {this.props.majorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.minorCost > 0 &&\n                            this.props.minorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(2, this.props.minorCost)}>\n                                {this.props.minorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.lesserCost > 0 &&\n                            this.props.lesserCost <= remainingCP &&\n\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(1, this.props.lesserCost)}>\n                                {this.props.lesserCost} </Button>)}\n                    </td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.state.purchased == 3 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.majorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 2 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.minorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 1 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.lesserCost)}>\n                                X </Button>)}\n                    </td>\n                </tr>\n            )\n        }\n    }\n}","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\n\ninterface IProps {\n  powerData: any[];\n  totalCP: number;\n  selectedPowers: any;\n  handleConfirm: (selectedPowers: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedPowers: any;\n  remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedPowers: this.props.selectedPowers,\n      remainingCP: this.props.totalCP\n    };\n  }\n\n  componentDidMount() {\n    //calculate remaining CP based on all data\n    var remainingCP = this.props.totalCP;\n    var sp = this.props.selectedPowers;\n    this.props.powerData.forEach(power => {\n      if (sp[power[\"Power\"]]) {\n        switch (sp[power[\"Power\"]]) {\n          case 1:\n            remainingCP -= Number(power[\"Lesser\"]);\n            break;\n          case 2:\n            remainingCP -= Number(power[\"Minor\"]);\n            break;\n          case 3:\n            remainingCP -= Number(power[\"Major\"]);\n            break;\n          default:\n            return;\n        }\n      }\n    });\n    this.setState({\n      remainingCP: remainingCP\n    });\n  }\n\n  render() {\n    return (\n      <Dialog\n        aria-describedby=\"Manage Powers\"\n        aria-labelledby=\"Manage Powers\"\n        className=\"manage-powers-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Powers</DialogTitle>\n\n        <DialogActions>\n          <form onSubmit={(selectedPowers: any) => this.props.handleConfirm(this.state.selectedPowers)} >\n            <FormControl required variant=\"outlined\">\n              Remaining CP: {this.state.remainingCP}\n\n\n              {/*\n                </FormControl>\n                <FormControl className=\"inputControl\">\n              */}\n              <table><thead><tr><th>Power</th><th>Major</th><th>Minor</th><th>Lesser</th></tr></thead>\n                <tbody>\n                  {this.props.powerData && this.props.powerData.map((row: any[string], i) => {\n                    if (row[\"Major\"] || row[\"Minor\"] || row[\"Lesser\"]) {\n                      //buyable power\n                      return (\n                        <BuyablePower\n                          key={i}\n                          name={row[\"Power\"]}\n                          majorCost={row[\"Major\"]}\n                          minorCost={row[\"Minor\"]}\n                          lesserCost={row[\"Lesser\"]}\n                          purchase={(name: string, level: number, cost: number) => this.purchasePower(name, level, cost)}\n                          purchased={this.state.selectedPowers[row[\"Power\"]] ? this.state.selectedPowers[row[\"Power\"]] : 0}\n                          remainingCP={this.state.remainingCP}\n                        />\n                      )\n                    }\n                  })}\n                </tbody>\n              </table>\n\n            </FormControl>\n            <div className=\"actionButtons\">\n              <Button onClick={() => this.props.handleConfirm(this.state.selectedPowers)} color=\"primary\">Save</Button>\n              <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n            </div>\n          </form>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  public purchasePower(name: string, level: number, cost: number) {\n    this.state.selectedPowers[name] = level;\n    this.setState({\n      //bug since this is done async\n      remainingCP: this.state.remainingCP - cost\n    })\n  }\n\n}\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  TextField,\n  FormControl,\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\ninterface IProps {\n  archData: any[];\n  selectedArch: string | null;\n  level: number | null;\n  handleConfirm: (selectedArch: string, level: number) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedArch: string;\n  level: number;\n}\n\nexport default class ManageArchPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedArch: this.props.selectedArch ? this.props.selectedArch : \"Standard\",\n      level: this.props.level ? this.props.level : 1\n    };\n\n    this.handleArchChange = this.handleArchChange.bind(this);\n    this.handleLevelChange = this.handleLevelChange.bind(this);\n  }\n  componentDidMount() {\n\n  }\n  handleArchChange(event: any) {\n    this.setState({ selectedArch: event.target.value });\n  }\n\n  handleLevelChange(event: any) {\n    this.setState({ level: Number(event.target.value) });\n  }\n\n\n\n  render() {\n    //build output panel\n    var output = [];\n    var level = this.state.level;\n    var sa = this.state.selectedArch;\n    var currentArch: string = \"\";\n    return (\n      <Dialog\n        aria-describedby=\"Manage Archetype\"\n        aria-labelledby=\"Manage Archetype\"\n        className=\"manage-arch-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Archetype</DialogTitle>\n\n        <DialogActions>\n          <FormControl required variant=\"outlined\">\n            <select value={this.state.selectedArch}\n              onChange={this.handleArchChange} >\n              {this.buildArchOptions()}\n            </select>\n            <TextField\n              id=\"level-input\"\n              label=\"Level\"\n              type=\"number\"\n              value={this.state.level ? this.state.level : 1}\n              inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n              onChange={this.handleLevelChange}\n              className=\"level-control\"\n            />\n            {/*Output data about the current selection*/}\n            <Container>\n              <table>\n                <tbody>\n                  {this.props.archData.map((row, i) => {\n                    if (row[\"Arch\"] === sa) {\n                      return (<tr>\n                        <td>{row[\"Row\"]}:</td>\n                        <td>{row[\"Level \" + level]}</td>\n                      </tr>);\n                    }\n                  })\n                  }\n                </tbody>\n              </table>\n            </Container>\n          </FormControl>\n          <div className=\"actionButtons\">\n            <Button onClick={() => this.props.handleConfirm(this.state.selectedArch, this.state.level)} color=\"primary\">Save</Button>\n            <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n          </div>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  buildArchOptions() {\n    var arr: any[] = [];\n    var currentArch = \"\";\n    this.props.archData.forEach(row => {\n      if (row[\"Arch\"] && row[\"Arch\"] !== currentArch) {\n        //new row\n        currentArch = row[\"Arch\"];\n        arr.push(\n          <option\n            value={currentArch}>\n            {currentArch}\n          </option>\n        );\n      }\n    })\n    return arr;\n  }\n\n\n\n}\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  TextField,\n  FormControl,\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\ninterface IProps {\n  statData: any[];\n  selectedStats: any;\n  handleConfirm: (statd: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedStats: any;\n}\n\nexport default class ManageStatsPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    if (Object.keys(this.props.selectedStats).length === 0) {\n      //  not coming in with any selected stats\n      var selectedStats: any = {};\n      this.props.statData.forEach(row => {\n        var stat: string = row[\"Stat\"]; //this row's stat\n        if (!selectedStats[stat]) {\n          //we do not have an entry for this stat\n          selectedStats[stat] = \"H\";\n        }\n      })\n      this.state = {\n        selectedStats: selectedStats\n      };\n    } else {\n      this.state = {\n        selectedStats: this.props.selectedStats\n      };\n    }\n    this.handleStatChange = this.handleStatChange.bind(this);\n  }\n  componentDidMount() {\n\n  }\n  handleStatChange(stat: string, value: string) {\n    var ss = JSON.parse(JSON.stringify(this.state.selectedStats));\n    ss[stat] = value;\n    this.setState({\n      selectedStats: ss\n    })\n  }\n\n\n  render() {\n    //build output panel\n    var humanRanks = [];\n\n    return (\n      <Dialog\n        aria-describedby=\"Manage Archetype\"\n        aria-labelledby=\"Manage Archetype\"\n        className=\"manage-arch-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Stats</DialogTitle>\n\n        <DialogActions>\n          <FormControl required variant=\"outlined\">\n            {Object.keys(this.state.selectedStats).map((stat, i) => {\n              var rank = this.state.selectedStats[stat];\n              return (<React.Fragment>\n                {stat}\n                <select value={rank}\n                  onChange={(e) => this.handleStatChange(stat, e.target.value)}>\n                  {Object.keys(this.props.statData[0]).map((col, i) => {\n                    if (col.startsWith(\"H\")) {\n                      return (<option value={col}>{col}</option>)\n                    } else {\n                      return;\n                    }\n                  })}\n                </select>\n                {/*output data about this stat */}\n              </React.Fragment>);\n            })\n            }\n          </FormControl>\n          <div className=\"actionButtons\">\n            <Button onClick={() => this.props.handleConfirm(this.state.selectedStats)} color=\"primary\">Save</Button>\n            <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n          </div>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n","import React from 'react';\nimport {\n    Tooltip,\n    Button,\n    Box\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/Table';\nimport Paper from '@material-ui/core/Paper';\nimport Ability from \"./Ability\";\nimport Buff from \"./Buff\";\nimport Natural from \"./Natural\";\n\ninterface IProps {\n    abilities: Ability[]\n    buffs: Buff[]\n    naturals: Natural[]\n}\n\n\nexport default class InfoPanel extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <Box display=\"flex\">\n                <Box minHeight=\"25%\" width=\"30%\" position=\"Left\" display=\"flex\">\n                    <div style={{ width: '500px' }}>\n                        <h3>Attributes</h3>\n                        {this.props.naturals.length === 0 && (<div>Select your Stats</div>)}\n                        {this.props.naturals.map((n: Natural, i) => {\n                                return n.render();\n                            })\n                        }\n                        <h3>Active Buffs</h3>\n                        {this.props.buffs.map((b: Buff, i) => {\n                            return b.render();\n                        })}\n                    </div>\n                </Box>\n                <Box minHeight=\"25%\" width=\"65%\" position=\"right\" display=\"flex\">\n                    <div style={{ width: '800px' }}>\n                        <h3> Abilities</h3>\n\n                        <TableContainer >\n                            <Table aria-label=\"simple table\">\n                                {this.props.abilities.map((a, i) => {\n                                    return a.render();\n                                })}\n                            </Table>\n                        </TableContainer>\n                    </div>\n                </Box>\n            </Box >\n        )\n    }\n\n}\n","import React from 'react';\nimport {\n    Button,\n    Tooltip,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Ability from './Ability';\nimport Natural from './Natural';\n\n\ninterface IProps {\n    value: string,\n    effect: string,\n    condition: string,\n    source: string,\n    detail: string,\n    color: string,\n    tags: string[]\n}\n\nexport default class Buff extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n\n    public render() {\n        //render in the BUFF PANEL. this means\n        //only those with passive tag\n        if (!this.props.tags.includes(\"passive\")){\n            return ;\n        }\n        var text = this.props.value + \" \" + this.props.effect;\n        var condition = (this.props.condition.length > 0) ? \" when \" + this.props.condition : \"\";\n        var byline = \"From \" + this.props.source;\n\n        return (<div style={{ backgroundColor: this.props.color }}>\n            {text}{condition}\n            <br />\n            <small>{byline}</small>\n        </div>);\n    }\n\n    public renderAsBuffline(abilityName: string) {\n        return (<TableRow>\n            <TableCell padding=\"none\">\n                {this.props.value +\n                    \" \" +\n                    this.props.effect +\n                    (this.props.condition.length > 0 ? \" when \" + this.props.condition : \"\") +\n                    (this.props.source === abilityName ? \"\" : \" from \" + this.props.source)\n                }\n            </TableCell>\n        </TableRow>);\n    }\n    public appliesTo(a: Ability | Natural) {\n        var name: String = a.getName();\n        var tags: String[] = a.getTags();\n\n        if (this.props.source === name) {\n            return true;\n        }\n\n        var applies = false;\n        this.props.tags.forEach(myTag => {\n            tags.forEach(otherTag => {\n                if (myTag === otherTag ||\n                    myTag === name) {\n                    applies = true;\n                }\n            })\n        });\n        return applies;\n    }\n\n    public getValue(){\n        return this.props.value;\n    }\n\n    public getEffect(){\n        return this.props.effect;\n    }\n\n    public getTags() : string[]{\n        return this.props.tags;\n    }\n\n    public getName() : string{\n        return this.props.source;\n    }\n}","import React from 'react';\nimport {\n    Button,\n    Tooltip,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Buff from './Buff';\n\n\ninterface IProps {\n    name: string,\n    action: string,\n    value: string,\n    effect: string,\n    detail: string,\n    buffs: Buff[],\n    tags: string[],\n    condition: string,\n    color: string\n}\n\nexport default class Ability extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    public render() {\n\n\n        return (\n            <TableBody style={{ backgroundColor: this.props.color }}>\n                <TableRow ><TableCell><h5 >{this.props.name}</h5></TableCell></TableRow>\n                <TableRow>\n                    <TableCell padding=\"none\">\n                        {this.props.action}\n                    </TableCell>\n                    <TableCell padding=\"none\">\n                        {this.getPriority()}\n                    </TableCell>\n                    <TableCell padding=\"none\" >\n                        {this.getValue() + \" \" + this.props.effect}\n                        {this.props.detail && this.props.detail.length > 0 && (\n                            <Tooltip title={this.props.detail.replaceAll(\"\\\"\", \"\")} arrow interactive>\n                                <Button>(?)</Button>\n                            </Tooltip>\n                        )}\n                    </TableCell>\n                </TableRow>\n                {(this.props.buffs).map((buff, i) => {\n                    return buff.renderAsBuffline(this.props.name);\n                })}\n            </TableBody>);\n    }\n\n\n    public getName() {\n        return this.props.name;\n    }\n\n    public getTags() {\n        return this.props.tags;\n    }\n\n    /*switch (buff.effect) {\n                  case \"Priority\":\n                    a[\"atk\"] = buff.value;\n                    break;\n                  case \"ATK\":\n                    a[\"atk\"] += \"+\" + buff.value;\n                    break;\n                  case \"DMG\":\n                    a[\"dmg\"] += \"+\" + buff.value;\n                    break;\n                  default:\n                    //do nothing, buffline will convey meaning\n                    break;\n                }\n                a[\"bufflines\"].push(buff);\n              }\n */\n\n    private getPriority(): string {\n        var modifier = 0;\n        if (this.props.tags.includes(\"atk\")) {\n            //this is an ATK roll\n            this.props.buffs.forEach(b => {\n                if (b.getTags().includes(\"atk\") || b.getTags().includes(\"priority\")) {\n                    if (/^\\d$/.test(b.getValue())) {\n                        modifier += Number(b.getValue());\n                    } else {\n                        //it's an atk or priority buff but not a number? strange. \n                        console.log(\"strange interaction between \" + this.props.name + \" and buff \" + b.getName());\n                    }\n                }\n            });\n            return \"1d20\" + (modifier > 0 ? \" + \"+modifier : \"\");\n        } else {\n            //this is NOT an atk roll\n\n            //currently unsupported. display nothing\n            // this.props.buffs.forEach(b => {\n            //     if (b.getTags().includes(\"priority\")) {\n            //         if (/^\\d$/.test(b.getValue())) {\n            //             modifier += Number(b.getValue());\n            //         }\n            //     }\n            // });\n            return \"\";\n        }\n      //  return this.returnModifiedValue(modifier) as string;\n    }\n\n    private getValue() {\n        var modifier = 0;\n        this.props.buffs.forEach(b => {\n            if (b.getEffect() === this.props.effect) {\n                if (/^\\d$/.test(b.getValue())) {\n                    modifier += Number(b.getValue());\n                } else {\n                    //modifier is not a number but effect is same? odd\n                    console.log(\"strange modifier in \" + this.props.name);\n                }\n            }\n        });\n        return this.returnModifiedValue(this.props.value, modifier);\n    }\n\n    private returnModifiedValue(value: string, modifier: Number) {\n        if (modifier > 0) {\n            if (/^[\\d]+$/.test(value)) {\n                //numeric value with a modifier\n                return Number(value) + Number(modifier) + \" (\"+value + \" + \" + modifier+ \")\";\n            } else {\n                //non-numeric value with a modifier\n                return value + \" + \" + modifier;\n            }\n        }\n        return value;\n    }\n\n    public addBuff(b: Buff) {\n\n        this.props.buffs.push(b);\n    }\n}","import React from 'react';\nimport {\n    Button,\n    Tooltip,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Buff from './Buff';\n\n\ninterface IProps {\n    name: string,\n    value: string,\n    buffs: Buff[]\n}\n\nexport default class Natural extends React.Component<IProps> {\n\n    constructor(props: IProps) {\n        super(props);\n    }\n\n    public render() {\n        return (<li>\n            <strong>\n                {this.props.name}: {this.props.value}\n            </strong>\n        </li>);\n    }\n\n    public getName() {\n        return this.props.name;\n    }\n\n    public getTags() {\n        return [];\n    }\n\n\n    public addBuff(b: Buff) {\n        this.props.buffs.push(b);\n    }\n}","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport ManageArchPanel from \"./components/ManageArchPanel\";\nimport ManageStatsPanel from \"./components/ManageStatsPanel\";\nimport InfoPanel from \"./components/InfoPanel\";\nimport Buff from \"./components/Buff\";\nimport Ability from \"./components/Ability\";\nimport Natural from \"./components/Natural\";\nimport { setSourceMapRange } from \"typescript\";\n\ninterface IArch {\n  name: string\n  level: number\n  lesserRank: number\n  minorRank: number\n  majorRank: number\n  characterPoints: number\n  trainingPoints: number\n  willDice: number\n}\n\ninterface IState {\n  showManagePowersPanel: boolean\n  showManageArchPanel: boolean\n  showManageStatsPanel: boolean\n  selectedPowers: any\n  selectedArch: string\n  level: number\n  powerData: any[]\n  archData: any[]\n  statData: any[]\n  selectedStats: any\n  abilities: Ability[]\n  buffs: Buff[]\n  naturals: Natural[]\n  arch: IArch | null\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      showManagePowersPanel: false,\n      showManageArchPanel: false,\n      showManageStatsPanel: false,\n      selectedPowers: {},\n      selectedArch: \"\",\n      selectedStats: {},\n      level: 1,\n      powerData: [],\n      archData: [],\n      statData: [],\n      abilities: [],\n      buffs: [],\n      naturals: [],\n      arch: null\n    }\n  }\n\n  componentDidMount() {\n    let archName = window.localStorage.getItem(\"selectedArch\");\n    let level = window.localStorage.getItem(\"level\");\n    let sp = window.localStorage.getItem(\"selectedPowers\");\n    let ss = window.localStorage.getItem(\"selectedStats\");\n//    let ss = {};\n\n    if (archName) {\n      this.setState({\n        selectedArch: archName\n      })\n    }\n    if (level) {\n      this.setState({\n        level: JSON.parse(level)\n      })\n    }\n    if (sp) {\n      this.setState({\n        selectedPowers: JSON.parse(sp)\n      })\n    }\n    if (ss) {\n      this.setState({\n        selectedStats: JSON.parse(ss)\n      })\n    }\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/powers.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          powerData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/stats.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          statData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/arch.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          archData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.archData !== [] &&\n          this.state.powerData !== [] && (\n            <NavBar\n              toggleManagePowers={\n                this.showManagePowersPanel\n              }\n              toggleManageArch={\n                this.showManageArchPanel\n              }\n              toggleManageStats={\n                this.showManageStatsPanel\n              }\n            />\n          )}\n        <main className=\"container\">\n          {this.state.selectedArch == \"\" ? (<strong>Select an Archetype</strong>) :\n            (<InfoPanel\n              abilities={this.state.abilities}\n              buffs={this.state.buffs}\n              naturals={this.state.naturals}\n            />)}\n        </main>\n        {\n          this.state.showManagePowersPanel &&\n          this.state.arch &&\n          (<ManagePowersPanel\n            powerData={this.state.powerData}\n            selectedPowers={this.state.selectedPowers}\n            totalCP={this.state.arch.characterPoints}\n            handleConfirm={(selectedPowers: any) =>\n              this.updateSelectedPowers(selectedPowers)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)}\n        {\n          this.state.showManageArchPanel &&\n          (<ManageArchPanel\n            archData={this.state.archData}\n            selectedArch={this.state.selectedArch}\n            level={this.state.arch ? this.state.arch.level : 1}\n            handleConfirm={(name: string, level: number) =>\n              this.updateSelectedArch(name, level)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)\n        }\n        {\n          this.state.showManageStatsPanel &&\n          (<ManageStatsPanel\n            statData={this.state.statData}\n            selectedStats={this.state.selectedStats}\n            handleConfirm={(ss: any) =>\n              this.updateSelectedStats(ss)\n            }\n            handleClose={() => this.closePanels()}\n          />)\n        }\n      </div >\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false,\n      showManageArchPanel: false,\n      showManageStatsPanel: false\n    })\n  }\n\n\n\n  updateSelectedArch(name: string, lev: number) {\n    this.setState({\n      selectedArch: name,\n      level: lev\n    })\n    window.localStorage.setItem(\"selectedArch\", name);\n    window.localStorage.setItem(\"level\", JSON.stringify(lev));\n    this.parseData(this.state.selectedPowers, name, lev);\n    this.closePanels();\n  }\n\n  updateSelectedPowers(selectedPowers: any) {\n    this.setState({\n      selectedPowers: selectedPowers\n    })\n    window.localStorage.setItem(\"selectedPowers\", JSON.stringify(selectedPowers));\n    this.parseData(selectedPowers);\n    this.closePanels();\n  }\n  updateSelectedStats(selectedStats: any) {\n    alert(\"Updating \"+JSON.stringify(selectedStats));\n    this.setState({\n      selectedStats: selectedStats\n    })\n    window.localStorage.setItem(\"selectedStats\", JSON.stringify(selectedStats));\n    this.parseData(this.state.selectedPowers, this.state.selectedArch, this.state.level, selectedStats);\n    this.closePanels();\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n  showManageArchPanel = () => {\n    this.setState({\n      showManageArchPanel: true\n    }\n    );\n  }\n  showManageStatsPanel = () => {\n    this.setState({\n      showManageStatsPanel: true\n    }\n    );\n  }\n  getRank = (parsedArch: IArch, tier: number) => {\n    switch (tier) {\n      case 1:\n        return (parsedArch.lesserRank);\n      case 2:\n        return (parsedArch.minorRank);\n      case 3:\n        return (parsedArch.majorRank);\n      default:\n        return 0;\n    }\n  }\n\n  //var csv is the CSV file with headers\n  public csvToJson(csv: string) {\n    var lines = csv.split(\"\\r\\n\");\n    var result = [];\n    //todo would be nice to support commas in data\n    //by skipping escaped commas\n    var headers = lines[0].split(\",\");\n    for (var i = 1; i < lines.length; i++) {\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n      result.push(obj);\n    }\n    return result;\n    //return JSON.stringify(result); //JSON\n  }\n\n  private parseData(sp: any = this.state.selectedPowers, selectedArch: string = this.state.selectedArch, level: number = this.state.level, selectedStats: any = this.state.selectedStats) {\n    if (selectedArch === \"\" ||\n      level === 0 ||\n      this.state.archData === [] ||\n      this.state.powerData === [] ||\n      this.state.statData === []) {\n      return;\n    }\n\n    var parsedArch: IArch = {\n      characterPoints: 0,\n      lesserRank: 0,\n      level: level,\n      majorRank: 0,\n      minorRank: 0,\n      name: selectedArch,\n      trainingPoints: 0,\n      willDice: 0\n    }\n\n    var abilities: Ability[] = [];\n    var buffs: Buff[] = [];\n    var naturals: Natural[] = [];\n\n    this.state.archData.forEach(function (row) {\n      if (row[\"Arch\"] === selectedArch) {\n        var val = row[\"Level \" + level];\n        var detail = row[\"Detail\"];\n        //todo - add detail to parsedArch\n        switch (row[\"Row\"]) {\n          case \"CP\":\n            parsedArch.characterPoints = val;\n            break;\n          case \"TP\":\n            parsedArch.trainingPoints = val;\n            break;\n          case \"Major\":\n            parsedArch.majorRank = val;\n            break;\n          case \"Minor\":\n            parsedArch.minorRank = val;\n            break;\n          case \"Lesser\":\n            parsedArch.lesserRank = val;\n            break;\n          case \"Will Dice\":\n            parsedArch.willDice = val;\n            break;\n          default:\n          //do nothing\n        }\n      }\n    });\n\n    //STATS\n    this.state.statData.forEach(stat => {\n      //Every row gets added unless the value is X\n      var statName = stat[\"Stat\"];\n      var rank = selectedStats[statName];\n    \n      //alert(JSON.stringify(this.state.selectedStats));\n\n      if (stat[rank] != \"X\") {\n        switch (stat[\"Row\"]) {\n          case \"Ability\":\n            abilities.push(new Ability({\n              action: stat[\"Action\"],\n              name: stat[\"Attribute\"],\n              value: stat[rank],\n              effect: stat[\"Effect\"],\n              detail: stat[\"Detail\"],\n              tags: ((stat[\"Tags\"].length > 0) ? (stat[\"Tags\"].split(\" \")) : []),\n              condition: stat[\"Condition\"],\n              buffs: [],\n              color: this.nameToColor(statName)\n            }));\n            break;\n          case \"Natural\":\n            naturals.push(new Natural({\n              name: stat[\"Attribute\"],\n              value: stat[rank],\n              buffs: []\n            }));\n            break;\n          case \"Buff\":\n            buffs.push(new Buff({\n              source: stat,\n              effect: stat[\"Effect\"],\n              value: stat[rank],\n              condition: stat[\"Condition\"],\n              detail: stat[\"Detail\"],\n              tags: (stat[\"Tags\"].length > 0) ? (stat[\"Tags\"].split(\" \")) : [],\n              color: this.nameToColor(statName)\n            }));\n            break;\n        }\n      }\n    });\n\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0 &&\n        parsedArch) {\n        var rank = this.getRank(parsedArch, sp[power[\"Power\"]]);\n        if (power[\"Row\"] === \"Ability\") {\n          abilities.push(new Ability({\n            action: power[\"Action\"],\n            name: power[\"Power\"],\n            value: power[\"r\" + rank],\n            effect: power[\"Effect\"],\n            detail: power[\"Detail\"],\n            tags: ((power[\"Tags\"].length > 0) ? (power[\"Tags\"].split(\" \")) : []),\n            condition: power[\"Condition\"],\n            buffs: [],\n            color: this.nameToColor(power[\"Power\"])\n          }));\n        } else if (power[\"Row\"] === \"Buff\") {\n          buffs.push(new Buff({\n            source: power[\"Power\"],\n            effect: power[\"Effect\"],\n            value: power[\"r\" + rank],\n            condition: power[\"Condition\"],\n            detail: power[\"Detail\"],\n            tags: (power[\"Tags\"].length > 0) ? (power[\"Tags\"].split(\" \")) : [],\n            color: this.nameToColor(power[\"Power\"])\n          }));\n        }\n      }\n    });\n\n    buffs.map((b, j) => {\n      abilities.map((a, i) => {\n        this.tryOnBuff(a, b);\n      });\n      naturals.map((n, i) => {\n        this.tryOnBuff(n, b);\n      });\n    });\n\n    this.setState({\n      abilities: abilities,\n      buffs: buffs,\n      naturals: naturals,\n      arch: parsedArch\n    })\n  }\n\n  private tryOnBuff(a: Natural | Ability, b: Buff) {\n    var match = false;\n    if (a.getName() === b.getName()){\n      a.addBuff(b);\n      return true;\n    }\n    a.getTags().forEach(tag => {\n      if (b.getTags().includes(tag)) {\n        a.addBuff(b);\n        return true;\n      }\n    });\n  }\n\n  private nameToColor(name: string) {\n    //makes a light color from any string\n\n    var h = 0, l = name.length, i = 0;\n    if (l > 0)\n      while (i < l)\n        h = (h << 5) - h + name.charCodeAt(i++) | 0;\n    var code = (Math.abs(h).toString(16));\n    var red = (255 - (Math.round(parseInt(code.substr(0, 2), 16) / 2))).toString(16);\n    var green = (255 - (Math.round(parseInt(code.substr(2, 2), 16) / 2))).toString(16);\n    var blue = (255 - (Math.round(parseInt(code.substr(4, 2), 16) / 2))).toString(16);\n    const color = \"#\" + red + green + blue;\n    return color;\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}