{"version":3,"sources":["components/BuyablePower.tsx","components/ManagePowersPanel.tsx","components/NavBar.jsx","components/ManageArchPanel.tsx","components/InfoPanel.tsx","App.tsx","index.js"],"names":["BuyablePower","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","purchased","purchase","name","_this2","react_default","a","createElement","majorCost","Button","color","variant","onClick","setState","minorCost","lesserCost","React","Component","ManagePowersPanel","selectedPowers","totalCP","remainingCP","Dialog","aria-describedby","aria-labelledby","className","fullWidth","onClose","handleClose","open","DialogTitle","DialogActions","onSubmit","handleConfirm","FormControl","required","TextField","id","label","type","onChange","calculateRemainingCP","powerData","map","row","BuyablePower_BuyablePower","level","purchasePower","NavBar","_ref","toggleManagePowers","toggleManageArch","selectedArch","handleArchChange","bind","assertThisInitialized","handleLevelChange","event","target","value","Number","buildArchOptions","inputProps","min","max","step","arr","currentArch","archData","forEach","push","InfoPanel","abilityList","buffList","rows","columns","field","headerName","width","flex","renderCell","params","split","Tooltip","title","arrow","interactive","i","abilities","length","action","atk","effect","replaceAll","Box","minHeight","style","height","index_esm","hideFooter","hideFooterPagination","App","closePanels","showManagePowersPanel","showManageArchPanel","parsedAbilities","parsedBuffs","parsedArch","archName","window","localStorage","getItem","sp","JSON","parse","fetch","then","r","text","csvToJson","parseData","_this3","components_NavBar","InfoPanel_InfoPanel","buffs","ManagePowersPanel_ManagePowersPanel","updateSelectedPowers","ManageArchPanel_ManagePowersPanel","updateSelectedArch","lev","setItem","stringify","csv","lines","result","headers","obj","currentline","j","arguments","undefined","characterPoints","lesserRank","majorRank","minorRank","trainingPoints","willDice","val","power","rank","ability","dmg","detail","tags","condition","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.81e32c5a.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\n\n\ninterface IProps {\n    name: string;\n    majorCost: number;\n    minorCost: number;\n    lesserCost: number;\n    purchase: any;\n}\n\ninterface IState {\n    purchased: number; //1-2-3 for lesser-minor-major. 0 is nothing\n}\n\nexport default class BuyablePower extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            purchased: 0\n        };\n    }\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(){\n        //power was either purchased or sold\n        this.props.purchase(this.props.name, this.state.purchased);\n    }\n\n    render() {\n        if (this.state.purchased == 0) {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.props.majorCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 3\n                                    })\n                                }> {this.props.majorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.minorCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 2\n                                    })\n                                }> {this.props.minorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.lesserCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 1\n                                    })\n                                }> {this.props.lesserCost} </Button>)}\n                    </td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                    {this.state.purchased == 3 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}\n                    </td>\n                    <td>\n                    {this.state.purchased == 2 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}                        \n                    </td>\n                   <td>\n                       {this.state.purchased == 1 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}\n                        </td>\n                </tr>\n            )\n        }\n    }\n}","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\n\ninterface IProps {\n  powerData: any[];\n  selectedPowers: any;\n  handleConfirm: (selectedPowers: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedPowers: any;\n  totalCP: number;\n  remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedPowers: {},\n      totalCP: 0,\n      remainingCP: 0\n    };\n  }\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <Dialog\n        aria-describedby=\"Manage Powers\"\n        aria-labelledby=\"Manage Powers\"\n        className=\"manage-powers-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Powers</DialogTitle>\n\n        <DialogActions>\n          <form onSubmit={(selectedPowers: any) => this.props.handleConfirm(this.state.selectedPowers)} >\n            <FormControl required variant=\"outlined\">\n              <TextField\n                id=\"total-cp-input\"\n                label=\"Total CP\"\n                type=\"number\"\n                onChange={() => this.calculateRemainingCP}\n                className=\"total-cp-input\"\n              />\n              Remaining CP: {this.state.remainingCP}\n\n\n              {/*\n                </FormControl>\n                <FormControl className=\"inputControl\">\n              */}\n              <table><thead><tr><th>Power</th><th>Major</th><th>Minor</th><th>Lesser</th></tr></thead>\n                <tbody>\n                  {this.props.powerData && this.props.powerData.map((row: any[string]) => {\n                    if (row[\"Major\"] || row[\"Minor\"] || row[\"Lesser\"]) {\n                      return (\n                        <BuyablePower\n                          name={row[\"Power\"]}\n                          majorCost={row[\"Major\"]}\n                          minorCost={row[\"Minor\"]}\n                          lesserCost={row[\"Lesser\"]}\n                          purchase={(name: string, level: number) => this.purchasePower(name, level)}\n                        />\n                      )\n                    }\n                  })}\n                </tbody>\n              </table>\n\n            </FormControl>\n            <div className=\"actionButtons\">\n              <Button onClick={() => this.props.handleConfirm(this.state.selectedPowers)} color=\"primary\">Save</Button>\n              <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n            </div>\n          </form>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  private calculateRemainingCP() {\n    this.setState({\n      remainingCP: this.state.totalCP\n    })\n  }\n  public purchasePower(name: string, level: number) {\n    this.state.selectedPowers[name] = level;\n  }\n\n}\n","import React from \"react\";\nimport { Button } from '@material-ui/core';\nimport ManagePowersPanel from \"./ManagePowersPanel\";\n\n// Stateless Functional Component\n\nconst NavBar = ({ toggleManagePowers , toggleManageArch}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\">\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManagePowers}> Powers </Button>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManageArch}> Archetype/Level </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  TextField,\n  FormControl,\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\ninterface IProps {\n  archData: any[];\n  selectedArch: string | null;\n  level: number | null;\n  handleConfirm: (selectedArch: string, level: number) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedArch: string;\n  level: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedArch: this.props.selectedArch  ? this.props.selectedArch : \"Standard\",\n      level: this.props.level ? this.props.level : 1\n    };\n\n    this.handleArchChange = this.handleArchChange.bind(this);\n    this.handleLevelChange = this.handleLevelChange.bind(this);\n  }\n  componentDidMount() {\n\n  }\n  handleArchChange(event: any) {\n    this.setState({ selectedArch: event.target.value });\n  }\n\n  handleLevelChange(event: any) {\n    this.setState({ level: Number(event.target.value) });\n  }\n\n  render() {\n    var currentArch: string = \"\";\n    return (\n      <Dialog\n        aria-describedby=\"Manage Archetype\"\n        aria-labelledby=\"Manage Archetype\"\n        className=\"manage-arch-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Archetype</DialogTitle>\n\n        <DialogActions>\n          <FormControl required variant=\"outlined\">\n            <select value={this.state.selectedArch}\n              onChange={this.handleArchChange} >\n              {this.buildArchOptions()}\n            </select>\n            <TextField\n              id=\"level-input\"\n              label=\"Level\"\n              type=\"number\"\n              value={this.state.level ? this.state.level : 1}\n              inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n              onChange={this.handleLevelChange}\n              className=\"level-control\"\n            />\n            {/*<Container>\n              <table>\n                <tbody>\n                <tr>\n                  \n                </tr>\n                </tbody>\n              </table>\n            </Container>*/}\n          </FormControl>\n          <div className=\"actionButtons\">\n            <Button onClick={() => this.props.handleConfirm(this.state.selectedArch, this.state.level)} color=\"primary\">Save</Button>\n            <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n          </div>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  buildArchOptions() {\n    var arr: any[] = [];\n    var currentArch = \"\";\n    this.props.archData.forEach(row => {\n      if (row[\"Arch\"] && row[\"Arch\"] !== currentArch) {\n        //new row\n        currentArch = row[\"Arch\"];\n        arr.push(\n          <option\n            value={currentArch}>\n            {currentArch}\n          </option>\n        );\n      }\n    })\n    return arr;\n  }\n\n\n\n}\n","import React from 'react';\nimport {\n    Tooltip,\n    Button,\n    Box\n} from '@material-ui/core';\nimport { DataGrid, RowsProp, ColDef, CellParams } from '@material-ui/data-grid';\n\n\n\ninterface IProps {\n    abilities: any[]\n    buffs: any[]\n}\n\ninterface IState {\n\n}\n\nexport default class InfoPanel extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            abilityList: [],\n            buffList: []\n        };\n    }\n\n\n    render() {\n        const rows: RowsProp = [];\n        const columns: ColDef[] = [\n            { field: 'name', headerName: 'Name', width: 250 },\n            { field: 'action', headerName: 'Action', width: 120 },\n            { field: 'atk', headerName: 'Atk', width: 120 },\n            {\n                field: 'effect', headerName: 'Effect', flex: 100,\n                renderCell: (params: CellParams) => (\n                    <strong>\n                        {(params.value as string).split(\"|||\")[0]}\n                        <Tooltip title={(params.value as string).split(\"|||\")[1]} arrow interactive>\n                            <Button>?</Button>\n                        </Tooltip>\n                    </strong>\n                )\n            }\n        ];\n\n        for (let i = 0; i < this.props.abilities.length; i++) {\n            var a = this.props.abilities[i];\n            rows.push(\n                {\n                    id: i,\n                    name: a[\"name\"],\n                    action: a[\"action\"],\n                    atk: a[\"atk\"],\n                    effect: a[\"dmg\"] + \" \" + a[\"effect\"] + \"|||\" + a[\"detail\"].replaceAll(\"\\\"\", \"\")\n                }\n            )\n\n        }\n        return (\n            <Box minHeight=\"25%\">\n                <h3>Abilities</h3>\n                <div style={{ height: 300, width: '100%' }}>\n                    <DataGrid\n                        hideFooter={true}\n                        hideFooterPagination={true}\n                        rows={rows}\n                        columns={columns} />\n                </div>\n            </Box>\n\n        )\n    }\n\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport ManageArchPanel from \"./components/ManageArchPanel\";\n\nimport InfoPanel from \"./components/InfoPanel\";\nimport { stringNumberComparer } from \"@material-ui/data-grid\";\n\ninterface IArch {\n  name: string\n  level: number\n  lesserRank: number\n  minorRank: number\n  majorRank: number\n  characterPoints: number\n  trainingPoints: number\n  willDice: number\n}\n\ninterface IState {\n  showManagePowersPanel: boolean\n  showManageArchPanel: boolean\n  selectedPowers: any\n  selectedArch: string\n  level: number\n  powerData: any[]\n  archData: any[]\n  parsedAbilities: any[]\n  parsedBuffs: any[]\n  parsedArch: IArch | null\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      showManagePowersPanel: false,\n      showManageArchPanel: false,\n      selectedPowers: {},\n      selectedArch: \"\",\n      level: 1,\n      powerData: [],\n      archData: [],\n      parsedAbilities: [],\n      parsedBuffs: [],\n      parsedArch: null\n    }\n\n  }\n\n  componentDidMount() {\n    let archName = window.localStorage.getItem(\"selectedArch\");\n    let level = window.localStorage.getItem(\"level\");\n    let sp = window.localStorage.getItem(\"selectedPowers\");\n\n    if (archName){\n      this.setState({\n        selectedArch: archName\n      })\n    }\n    if (level){\n      this.setState({\n        level: JSON.parse(level)\n      })\n    }\n    if (sp){\n      this.setState({\n        selectedPowers: JSON.parse(sp)\n      })\n    }\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/powers.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          powerData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/arch.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          archData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          toggleManagePowers={\n            this.showManagePowersPanel\n          }\n          toggleManageArch={\n            this.showManageArchPanel\n          }\n        />\n        <main className=\"container\">\n          {this.state.selectedArch == \"\" ? (<strong>Select an Archetype</strong>) : \n            (<InfoPanel\n              abilities={this.state.parsedAbilities}\n              buffs={this.state.parsedBuffs}\n            />)}\n        </main>\n        {\n          this.state.showManagePowersPanel &&\n          (<ManagePowersPanel\n            powerData={this.state.powerData}\n            selectedPowers={this.state.selectedPowers}\n            handleConfirm={(selectedPowers: any) =>\n              this.updateSelectedPowers(selectedPowers)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)}\n        {\n          this.state.showManageArchPanel &&\n          (<ManageArchPanel\n            archData={this.state.archData}\n            selectedArch={this.state.selectedArch}\n            level={this.state.parsedArch ? this.state.parsedArch.level : 1}\n            handleConfirm={(name: string, level: number) =>\n              this.updateSelectedArch(name, level)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)\n        }\n      </div >\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false,\n      showManageArchPanel: false\n    })\n  }\n\n  updateSelectedArch(name: string, lev: number) {\n    this.setState({\n      selectedArch: name,\n      level: lev\n    })\n    window.localStorage.setItem(\"selectedArch\", name);\n    window.localStorage.setItem(\"level\", JSON.stringify(lev));\n    this.parseData(this.state.selectedPowers, name, lev);\n    this.closePanels();\n  }\n\n  updateSelectedPowers(selectedPowers: any) {\n    this.setState({\n      selectedPowers: selectedPowers\n    })\n    window.localStorage.setItem(\"selectedPowers\", JSON.stringify(selectedPowers));\n    this.parseData(selectedPowers);\n    this.closePanels();\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n  showManageArchPanel = () => {\n    this.setState({\n      showManageArchPanel: true\n    }\n    );\n  }\n\n  //var csv is the CSV file with headers\n  public csvToJson(csv: string) {\n\n    var lines = csv.split(\"\\r\\n\");\n\n    var result = [];\n\n    //todo would be nice to support commas in data\n    //by skipping escaped commas\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n\n    }\n\n    return result;\n    //return JSON.stringify(result); //JSON\n  }\n\n\n\n  private parseData(sp: any = this.state.selectedPowers, selectedArch: string = this.state.selectedArch, level: number = this.state.level) {\n    if (selectedArch === \"\" ||\n      level === 0 ||\n      this.state.archData === [] ||\n      this.state.powerData === []\n    ) {\n      return;\n    }\n\n    var parsedArch: IArch = {\n      characterPoints: 0,\n      lesserRank: 0,\n      level: level,\n      majorRank: 0,\n      minorRank: 0,\n      name: selectedArch,\n      trainingPoints: 0,\n      willDice: 0\n    }\n\n    this.state.archData.forEach(function (row) {\n      if (row[\"Arch\"] === selectedArch) {\n        var val = row[\"Level \" + level];\n        var detail = row[\"Detail\"];\n        //todo - add detail to parsedArch\n        switch (row[\"Row\"]) {\n          case \"CP\":\n            parsedArch.characterPoints = val;\n            break;\n          case \"TP\":\n            parsedArch.trainingPoints = val;\n            break;\n          case \"Major\":\n            parsedArch.majorRank = val;\n            break;\n          case \"Minor\":\n            parsedArch.minorRank = val;\n            break;\n          case \"Lesser\":\n            parsedArch.lesserRank = val;\n            break;\n          case \"Will Dice\":\n            parsedArch.willDice = val;\n            break;\n          default:\n          //do nothing\n        }\n      }\n    });\n\n    var abilities: any[] = [];\n    var buffs: any[] = [];\n    //todo - get Powers to give you the appropriate abilities and buffs\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0 &&\n        parsedArch) {\n        var rank = 0;\n        switch (sp[power[\"Power\"]]) {\n          case 1:\n            rank = parsedArch.lesserRank;\n            break;\n          case 2:\n            rank = parsedArch.minorRank;\n            break;\n          case 3:\n            rank = parsedArch.majorRank;\n            break;\n          default:\n            //do nothing\n            break;\n        }\n        if (power[\"Row\"] === \"Ability\") {\n          var ability = {\n            \"name\": power[\"Power\"],\n            \"action\": power[\"Action\"],\n            \"dmg\": power[\"r\" + rank],\n            \"atk\": \"1d20\",\n            \"effect\": power[\"Effect\"],\n            \"detail\": power[\"Detail\"],\n            \"tags\": power[\"Tags\"].split(\" \"),\n            \"condition\": power[\"Condition\"]\n          };\n\n          abilities.push(ability);\n        } else if (power[\"row\"] === \"Buff\") {\n          //todo\n        }\n      }\n    });\n\n    //todo - apply buffs\n\n    this.setState({\n      parsedAbilities: abilities,\n      parsedBuffs: buffs,\n      parsedArch: parsedArch\n    })\n\n\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}