{"version":3,"sources":["components/NavBar.jsx","components/ManagePowersPanel.tsx","App.tsx","index.js"],"names":["NavBar","_ref","toggleManagePowers","react_default","a","createElement","className","Button","color","variant","onClick","ManagePowersPanel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedPowers","totalCP","remainingCP","_this2","Dialog","aria-describedby","aria-labelledby","fullWidth","onClose","handleClose","open","DialogTitle","DialogContent","DialogActions","onSubmit","handleConfirm","FormControl","required","InputLabel","id","TextField","label","type","onChange","calculateRemainingCP","JSON","stringify","powerData","React","Component","App","closePanels","setState","showManagePowersPanel","updateSelectedPowers","csvToJson","require","getJsonFromCsv","components_NavBar","ManagePowersPanel_ManagePowersPanel","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.5ce36427.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from '@material-ui/core';\n\n\n// Stateless Functional Component\n\nconst NavBar = ({toggleManagePowers}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\">\n      <Button\n      color=\"primary\"\n      variant=\"contained\"\n      onClick={toggleManagePowers}> Manage Powers </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\n\n\ninterface IProps {\n  powerData: {};\n  selectedPowers: {};\n  handleConfirm: (selectedPowers:any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n   selectedPowers: any; //int array?\n   totalCP: number;\n   remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n    constructor(props:IProps) {\n        super(props);\n        this.state = {\n                        selectedPowers: \"\",\n                        totalCP: 0,\n                        remainingCP: 0\n                     };\n    }\n\n    render() { \n        return (\n        <Dialog\n          aria-describedby=\"Manage Powers\"\n          aria-labelledby=\"Manage Powers\"\n          className=\"manage-powers-dialog\"\n          fullWidth={true}\n          onClose={this.props.handleClose}\n          open={true}\n        >\n          <DialogTitle>Manage Powers</DialogTitle>\n          <DialogContent>\n            Manage your powers here\n          </DialogContent>\n          \n          <DialogActions>\n            <form onSubmit={(selectedPowers : any) => this.props.handleConfirm(this.state.selectedPowers)} >\n                <FormControl required variant=\"outlined\" className=\"inputControl\">\n                <InputLabel id=\"model-type-input-label\">Total CP</InputLabel>\n                <TextField\n                    id=\"total-cp-input\"\n                    label=\"Total CP\"\n                    type=\"number\"\n                    required\n                    onChange={this.calculateRemainingCP}\n                    className=\"total-cp-input\"\n                />\n                  {//this.props.powerData && \n                     \n                  }\n                <div><pre>{JSON.stringify(this.props.powerData, null, 2) }</pre></div>\n                \n                </FormControl>\n                <FormControl className=\"inputControl\">\n                \n                  {/* todo - render rows\n                  \n                  \n                  this.props.powerData && this.props.powerData.map((modelTypeName: string) => {\n                    return (\n                      <MenuItem key={modelTypeName} value={modelTypeName}>{modelTypeName}</MenuItem>\n                    );\n                  })*/}\n                \n                \n                </FormControl>\n                <div className=\"actionButtons\">\n                    <Button type=\"submit\">Save</Button>\n                    <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n                </div>\n            </form>\n          </DialogActions>\n        </Dialog>\n      );\n    }\n\n    private calculateRemainingCP(){\n\n    }\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport { flattenDiagnosticMessageText } from \"typescript\";\n\n\ninterface IState {\n  showManagePowersPanel: boolean;\n  selectedPowers: any; //number array?\n  powerData: {}\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n  \n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n        showManagePowersPanel: false,\n        selectedPowers: \"\",\n        powerData: {}\n    }\n\n  }\n\n  componentDidMount(){\n    let csvToJson = require('convert-csv-to-json');\n\n    this.setState({\n      powerData: csvToJson.getJsonFromCsv(\"./data/powers.csv\")\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar \n          toggleManagePowers={\n            this.showManagePowersPanel\n          }\n        />\n        <main className=\"container\">\n{/*          <StatPanel />\n          <AbilityPanel />\n\n*/}\n        </main>\n        {this.state.showManagePowersPanel && \n        (<ManagePowersPanel\n          powerData={this.state.powerData}\n          selectedPowers={this.state.selectedPowers}\n          handleConfirm={(selectedPowers: any) =>\n            this.updateSelectedPowers(selectedPowers)\n          }\n          handleClose={() => this.closePanels()\n          }\n        /> )}\n      </div>\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false\n    })\n  }\n\n  updateSelectedPowers= (selectedPowers: any) => {\n\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}