{"version":3,"sources":["components/BuyablePower.tsx","components/ManagePowersPanel.tsx","components/NavBar.jsx","components/InfoPanel.tsx","App.tsx","index.js"],"names":["BuyablePower","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","purchased","purchase","name","_this2","react_default","a","createElement","majorCost","Button","color","variant","onClick","setState","minorCost","lesserCost","React","Component","ManagePowersPanel","selectedPowers","totalCP","remainingCP","Dialog","aria-describedby","aria-labelledby","className","fullWidth","onClose","handleClose","open","DialogTitle","DialogActions","onSubmit","handleConfirm","FormControl","required","TextField","id","label","type","onChange","calculateRemainingCP","powerData","map","row","BuyablePower_BuyablePower","level","purchasePower","NavBar","_ref","toggleManagePowers","InfoPanel","abilityList","buffList","rows","columns","field","headerName","width","renderCell","params","size","alert","value","i","abilities","length","push","action","atk","dmg","effect","detail","style","height","index_esm","hideFooter","hideFooterPagination","App","closePanels","showManagePowersPanel","parsedAbilities","parsedBuffs","sp","window","localStorage","getItem","parseAbilities","JSON","parse","e","fetch","then","r","text","csvToJson","_this3","components_NavBar","InfoPanel_InfoPanel","buffs","ManagePowersPanel_ManagePowersPanel","updateSelectedPowers","setItem","stringify","csv","lines","split","result","headers","obj","currentline","j","forEach","power","ability","tags","condition","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.af1c0135.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\n\n\ninterface IProps {\n    name: string;\n    majorCost: number;\n    minorCost: number;\n    lesserCost: number;\n    purchase: any;\n}\n\ninterface IState {\n    purchased: number; //1-2-3 for lesser-minor-major. 0 is nothing\n}\n\nexport default class BuyablePower extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            purchased: 0\n        };\n    }\n    componentDidMount() {\n\n    }\n\n    componentDidUpdate(){\n        //power was either purchased or sold\n        this.props.purchase(this.props.name, this.state.purchased);\n    }\n\n    render() {\n        if (this.state.purchased == 0) {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.props.majorCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 3\n                                    })\n                                }> {this.props.majorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.minorCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 2\n                                    })\n                                }> {this.props.minorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.lesserCost > 0 &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() =>\n                                    this.setState({\n                                        purchased: 1\n                                    })\n                                }> {this.props.lesserCost} </Button>)}\n                    </td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                    {this.state.purchased == 3 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}\n                    </td>\n                    <td>\n                    {this.state.purchased == 2 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}                        \n                    </td>\n                   <td>\n                       {this.state.purchased == 1 && (\n                       <Button\n                        color=\"secondary\"\n                        variant=\"contained\"\n                        onClick={() =>\n                            this.setState({\n                                purchased: 0\n                            })\n                        }> X </Button>)}\n                        </td>\n                </tr>\n            )\n        }\n    }\n}","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\n\ninterface IProps {\n  powerData: any[];\n  selectedPowers: any;\n  handleConfirm: (selectedPowers: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedPowers: any;\n  totalCP: number;\n  remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedPowers: {},\n      totalCP: 0,\n      remainingCP: 0\n    };\n  }\n  componentDidMount() {\n\n  }\n\n  render() {\n    return (\n      <Dialog\n        aria-describedby=\"Manage Powers\"\n        aria-labelledby=\"Manage Powers\"\n        className=\"manage-powers-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Powers</DialogTitle>\n\n        <DialogActions>\n          <form onSubmit={(selectedPowers: any) => this.props.handleConfirm(this.state.selectedPowers)} >\n            <FormControl required variant=\"outlined\">\n              <TextField\n                id=\"total-cp-input\"\n                label=\"Total CP\"\n                type=\"number\"\n                onChange={() => this.calculateRemainingCP}\n                className=\"total-cp-input\"\n              />\n              Remaining CP: {this.state.remainingCP}\n\n\n              {/*\n                </FormControl>\n                <FormControl className=\"inputControl\">\n              */}\n              <table><thead><tr><th>Power</th><th>Major</th><th>Minor</th><th>Lesser</th></tr></thead>\n                <tbody>\n                  {this.props.powerData && this.props.powerData.map((row: any[string]) => {\n                    if (row[\"Major\"] || row[\"Minor\"] || row[\"Lesser\"]) {\n                      return (\n                        <BuyablePower\n                          name={row[\"Power\"]}\n                          majorCost={row[\"Major\"]}\n                          minorCost={row[\"Minor\"]}\n                          lesserCost={row[\"Lesser\"]}\n                          purchase={(name: string, level: number) => this.purchasePower(name, level)}\n                        />\n                      )\n                    }\n                  })}\n                </tbody>\n              </table>\n\n            </FormControl>\n            <div className=\"actionButtons\">\n              <Button onClick={() => this.props.handleConfirm(this.state.selectedPowers)} color=\"primary\">Save</Button>\n              <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n            </div>\n          </form>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  private calculateRemainingCP() {\n    this.setState({\n      remainingCP: this.state.totalCP\n    })\n  }\n  public purchasePower(name: string, level: number) {\n    this.state.selectedPowers[name] = level;\n  }\n\n}\n","import React from \"react\";\nimport { Button } from '@material-ui/core';\nimport ManagePowersPanel from \"./ManagePowersPanel\";\n\n// Stateless Functional Component\n\nconst NavBar = ({toggleManagePowers}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\">\n      <Button\n      color=\"primary\"\n      variant=\"contained\"\n      onClick={toggleManagePowers}> Manage Powers </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n    Container,\n    Button\n} from '@material-ui/core';\nimport { DataGrid, RowsProp, ColDef, CellParams } from '@material-ui/data-grid';\n\n\n\ninterface IProps {\n    abilities: any[]\n    buffs: any[]\n}\n\ninterface IState {\n\n}\n\nexport default class InfoPanel extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            abilityList: [],\n            buffList: []\n        };\n    }\n\n\n    render() {\n        const rows: RowsProp = [];\n        const columns: ColDef[] = [\n            { field: 'name', headerName: 'Name', width: 250 },\n            { field: 'action', headerName: 'Action', width: 120 },\n            { field: 'atk', headerName: 'Atk', width: 120 },\n            { field: 'dmg', headerName: 'Roll', width: 180 },\n            { field: 'effect', headerName: 'Effect', width: 150 },\n            {\n                field: 'detail', headerName: 'Detail', width: 100,\n                renderCell: (params: CellParams) => (\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        size=\"small\"\n                        onClick={() => alert(params.value)}\n                    >?</Button>\n                )\n            }\n        ];\n\n        for (let i = 0; i < this.props.abilities.length; i++) {\n            var a = this.props.abilities[i];\n            rows.push(\n                {\n                    id: i,\n                    name: a[\"name\"],\n                    action: a[\"action\"],\n                    atk: a[\"atk\"],\n                    dmg: a[\"dmg\"],\n                    effect: a[\"effect\"],\n                    detail: a[\"detail\"]\n                }\n            )\n\n        }\n        return (\n            <div style={{ height: 300, width: '100%' }}>\n                <DataGrid\n                    hideFooter={true}\n                    hideFooterPagination={true}\n                    rows={rows}\n                    columns={columns} />\n            </div>\n\n        )\n    }\n\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport InfoPanel from \"./components/InfoPanel\";\n\ninterface IState {\n  showManagePowersPanel: boolean\n  selectedPowers: any\n  powerData: any[]\n  parsedAbilities: any[]\n  parsedBuffs: any[]\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      showManagePowersPanel: false,\n      selectedPowers: {},\n      powerData: [],\n      parsedAbilities: [],\n      parsedBuffs: []\n    }\n\n  }\n\n  componentDidMount() {\n\n    let sp = window.localStorage.getItem(\"selectedPowers\");\n    if (sp != null) {\n      try {\n        this.parseAbilities(JSON.parse(sp));\n      } catch (e) {\n\n      }\n    }\n\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/powers.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          powerData: this.csvToJson(text)\n        });\n        if (this.state.selectedPowers){\n          this.parseAbilities(this.state.selectedPowers);\n        }\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          toggleManagePowers={\n            this.showManagePowersPanel\n          }\n        />\n        <main className=\"container\">\n          <InfoPanel\n            abilities={this.state.parsedAbilities}\n            buffs={this.state.parsedBuffs}\n          />\n\n\n        </main>\n        {this.state.showManagePowersPanel &&\n          (<ManagePowersPanel\n            powerData={this.state.powerData}\n            selectedPowers={this.state.selectedPowers}\n            handleConfirm={(selectedPowers: any) =>\n              this.updateSelectedPowers(selectedPowers)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)}\n      </div>\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false\n    })\n  }\n\n  updateSelectedPowers(selectedPowers: any) {\n    window.localStorage.setItem(\"selectedPowers\", JSON.stringify(selectedPowers));\n    this.parseAbilities(selectedPowers);\n\n    this.closePanels();\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n\n  //var csv is the CSV file with headers\n  public csvToJson(csv: string) {\n\n    var lines = csv.split(\"\\r\\n\");\n\n    var result = [];\n\n    //todo would be nice to support commas in data\n    //by skipping escaped commas\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n\n    }\n\n    return result;\n    //return JSON.stringify(result); //JSON\n  }\n\n\n\n  private parseAbilities(sp: any) {\n    if (!sp ||\n      sp.length === 0) {\n      return;\n    }\n\n    var abilities: any[] = [];\n    var buffs: any[] = [];\n    //todo - get Powers to give you the appropriate abilities and buffs\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0) {\n        if (power[\"Row\"] === \"Ability\") {\n          var ability = {\n            \"name\": power[\"Power\"],\n            \"action\": power[\"Action\"],\n            \"dmg\": power[\"r5\"],\n            \"atk\": \"1d20\",\n            \"effect\": power[\"Effect\"],\n            \"detail\": power[\"Detail\"],\n            \"tags\": power[\"Tags\"].split(\" \"),\n            \"condition\": power[\"Condition\"]\n          };\n\n          abilities.push(ability);\n        } else if (power[\"row\"] === \"Buff\") {\n          //todo\n        }\n      }\n    });\n\n    //todo - apply buffs\n\n    this.setState({\n      parsedAbilities: abilities,\n      parsedBuffs: buffs,\n      selectedPowers: sp\n    })\n\n    /*\n            name = { a[\"name\"]}\n            atk = { a[\"atk\"]}\n            dmg = { a[\"dmg\"]}\n            effect = { a[\"effect\"]}\n            condition = { a[\"condition\"]}\n            detail = { a[\"detail\"]}        \n            */\n\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}