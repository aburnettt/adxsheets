{"version":3,"sources":["components/NavBar.jsx","components/BuyablePower.tsx","components/ManagePowersPanel.tsx","components/ManageArchPanel.tsx","components/Ability.tsx","components/Buff.tsx","components/InfoPanel.tsx","App.tsx","index.js"],"names":["NavBar","toggleManagePowers","toggleManageArch","className","padding","Button","color","variant","onClick","BuyablePower","React","Component","constructor","props","super","this","state","purchased","setPurchased","level","cost","setState","purchase","name","componentDidMount","render","remainingCP","Number","majorCost","minorCost","lesserCost","ManagePowersPanel","selectedPowers","totalCP","sp","powerData","forEach","power","Dialog","aria-describedby","aria-labelledby","fullWidth","onClose","handleClose","open","DialogTitle","DialogActions","onSubmit","handleConfirm","FormControl","required","map","row","i","purchasePower","ManageArchPanel","selectedArch","handleArchChange","bind","handleLevelChange","event","target","value","sa","onChange","buildArchOptions","TextField","id","label","type","inputProps","min","max","step","Container","archData","arr","currentArch","push","Ability","a","ability","TableBody","style","backgroundColor","TableRow","TableCell","length","Tooltip","title","replaceAll","arrow","interactive","buff","Buff","b","text","effect","condition","byline","InfoPanel","abilityList","buffList","nameToColor","h","l","charCodeAt","code","Math","abs","toString","round","parseInt","substr","Box","display","minHeight","width","position","buffs","TableContainer","Table","aria-label","abilities","App","closePanels","showManagePowersPanel","showManageArchPanel","getRank","parsedArch","tier","lesserRank","minorRank","majorRank","parsedAbilities","parsedBuffs","archName","window","localStorage","getItem","JSON","parse","fetch","then","r","csvToJson","parseData","characterPoints","updateSelectedPowers","updateSelectedArch","lev","setItem","stringify","csv","lines","split","result","headers","obj","currentline","j","trainingPoints","willDice","val","passiveBuffs","rank","tags","detail","includes","tag","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.294e632f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from '@material-ui/core';\n\n// Stateless Functional Component\n\nconst NavBar = ({ toggleManagePowers , toggleManageArch}) => {\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <div className=\"navbar-brand\" padding=\"normal\">\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManagePowers}> Powers </Button> \n          &nbsp;\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={toggleManageArch}> Archetype/Level </Button>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport {\n    Button\n} from '@material-ui/core';\n\n\ninterface IProps {\n    name: string;\n    majorCost: number;\n    minorCost: number;\n    lesserCost: number;\n    purchase: any;\n    purchased: number;\n    remainingCP: number;\n}\n\ninterface IState {\n    purchased: number; //1-2-3 for lesser-minor-major. 0 is nothing\n}\n\nexport default class BuyablePower extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            purchased: this.props.purchased\n        };\n    }\n\n    setPurchased(level: number, cost: number) {\n        this.setState({\n            purchased: level\n        })\n        this.props.purchase(this.props.name, level, cost);\n    }\n\n    componentDidMount() {\n    }\n\n\n    render() {\n        if (this.state.purchased == 0) {\n            var remainingCP = Number(this.props.remainingCP); //weird bug makes me do this\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.props.majorCost > 0 &&\n                            this.props.majorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(3, this.props.majorCost)}>\n                                {this.props.majorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.minorCost > 0 &&\n                            this.props.minorCost <= remainingCP &&\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(2, this.props.minorCost)}>\n                                {this.props.minorCost} </Button>)}\n                    </td>\n                    <td>\n                        {this.props.lesserCost > 0 &&\n                            this.props.lesserCost <= remainingCP &&\n\n                            (<Button\n                                color=\"primary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(1, this.props.lesserCost)}>\n                                {this.props.lesserCost} </Button>)}\n                    </td>\n                </tr>\n            )\n        } else {\n            return (\n                <tr>\n                    <td>{this.props.name}</td>\n                    <td>\n                        {this.state.purchased == 3 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.majorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 2 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.minorCost)}>\n                                X </Button>)}\n                    </td>\n                    <td>\n                        {this.state.purchased == 1 && (\n                            <Button\n                                color=\"secondary\"\n                                variant=\"contained\"\n                                onClick={() => this.setPurchased(0, 0 - this.props.lesserCost)}>\n                                X </Button>)}\n                    </td>\n                </tr>\n            )\n        }\n    }\n}","import React from 'react';\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\n\ninterface IProps {\n  powerData: any[];\n  totalCP: number;\n  selectedPowers: any;\n  handleConfirm: (selectedPowers: any) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedPowers: any;\n  remainingCP: number;\n}\n\nexport default class ManagePowersPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedPowers: this.props.selectedPowers,\n      remainingCP: this.props.totalCP\n    };\n  }\n\n  componentDidMount() {\n    //calculate remaining CP based on all data\n    var remainingCP = this.props.totalCP;\n    var sp = this.props.selectedPowers;\n    this.props.powerData.forEach(power => {\n      if (sp[power[\"Power\"]]) {\n        switch (sp[power[\"Power\"]]) {\n          case 1:\n            remainingCP -= Number(power[\"Lesser\"]);\n            break;\n          case 2:\n            remainingCP -= Number(power[\"Minor\"]);\n            break;\n          case 3:\n            remainingCP -= Number(power[\"Major\"]);\n            break;\n          default:\n            return;\n        }\n      }\n    });\n    this.setState({\n      remainingCP: remainingCP\n    });\n  }\n\n  render() {\n    return (\n      <Dialog\n        aria-describedby=\"Manage Powers\"\n        aria-labelledby=\"Manage Powers\"\n        className=\"manage-powers-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Powers</DialogTitle>\n\n        <DialogActions>\n          <form onSubmit={(selectedPowers: any) => this.props.handleConfirm(this.state.selectedPowers)} >\n            <FormControl required variant=\"outlined\">\n              Remaining CP: {this.state.remainingCP}\n\n\n              {/*\n                </FormControl>\n                <FormControl className=\"inputControl\">\n              */}\n              <table><thead><tr><th>Power</th><th>Major</th><th>Minor</th><th>Lesser</th></tr></thead>\n                <tbody>\n                  {this.props.powerData && this.props.powerData.map((row: any[string], i) => {\n                    if (row[\"Major\"] || row[\"Minor\"] || row[\"Lesser\"]) {\n                      //buyable power\n                      return (\n                        <BuyablePower\n                          key={i}\n                          name={row[\"Power\"]}\n                          majorCost={row[\"Major\"]}\n                          minorCost={row[\"Minor\"]}\n                          lesserCost={row[\"Lesser\"]}\n                          purchase={(name: string, level: number, cost: number) => this.purchasePower(name, level, cost)}\n                          purchased={this.state.selectedPowers[row[\"Power\"]] ? this.state.selectedPowers[row[\"Power\"]] : 0}\n                          remainingCP={this.state.remainingCP}\n                        />\n                      )\n                    }\n                  })}\n                </tbody>\n              </table>\n\n            </FormControl>\n            <div className=\"actionButtons\">\n              <Button onClick={() => this.props.handleConfirm(this.state.selectedPowers)} color=\"primary\">Save</Button>\n              <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n            </div>\n          </form>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  public purchasePower(name: string, level: number, cost: number) {\n    this.state.selectedPowers[name] = level;\n    this.setState({\n      //bug since this is done async\n      remainingCP: this.state.remainingCP - cost\n    })\n  }\n\n}\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  TextField,\n  FormControl,\n} from '@material-ui/core';\nimport BuyablePower from \"./BuyablePower\";\n\ninterface IProps {\n  archData: any[];\n  selectedArch: string | null;\n  level: number | null;\n  handleConfirm: (selectedArch: string, level: number) => void;\n  handleClose: () => void;\n}\n\ninterface IState {\n  selectedArch: string;\n  level: number;\n}\n\nexport default class ManageArchPanel extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      selectedArch: this.props.selectedArch ? this.props.selectedArch : \"Standard\",\n      level: this.props.level ? this.props.level : 1\n    };\n\n    this.handleArchChange = this.handleArchChange.bind(this);\n    this.handleLevelChange = this.handleLevelChange.bind(this);\n  }\n  componentDidMount() {\n\n  }\n  handleArchChange(event: any) {\n    this.setState({ selectedArch: event.target.value });\n  }\n\n  handleLevelChange(event: any) {\n    this.setState({ level: Number(event.target.value) });\n  }\n\n  render() {\n    //build output panel\n    var output = [];\n    var level = this.state.level;\n    var sa = this.state.selectedArch;\n    var currentArch: string = \"\";\n    return (\n      <Dialog\n        aria-describedby=\"Manage Archetype\"\n        aria-labelledby=\"Manage Archetype\"\n        className=\"manage-arch-dialog\"\n        fullWidth={true}\n        onClose={this.props.handleClose}\n        open={true}\n      >\n        <DialogTitle>Manage Archetype</DialogTitle>\n\n        <DialogActions>\n          <FormControl required variant=\"outlined\">\n            <select value={this.state.selectedArch}\n              onChange={this.handleArchChange} >\n              {this.buildArchOptions()}\n            </select>\n            <TextField\n              id=\"level-input\"\n              label=\"Level\"\n              type=\"number\"\n              value={this.state.level ? this.state.level : 1}\n              inputProps={{ min: \"1\", max: \"10\", step: \"1\" }}\n              onChange={this.handleLevelChange}\n              className=\"level-control\"\n            />\n            {/*Output data about the current selection*/}\n            <Container>\n              <table>\n                <tbody>\n                  {this.props.archData.map((row, i) => {\n                    if (row[\"Arch\"] === sa) {\n                      return (<tr>\n                        <td>{row[\"Row\"]}:</td>\n                        <td>{row[\"Level \" + level]}</td>\n                      </tr>);\n                    }\n                  })\n                  }\n                </tbody>\n              </table>\n            </Container>\n          </FormControl>\n          <div className=\"actionButtons\">\n            <Button onClick={() => this.props.handleConfirm(this.state.selectedArch, this.state.level)} color=\"primary\">Save</Button>\n            <Button onClick={() => this.props.handleClose()} color=\"primary\">Cancel</Button>\n          </div>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n\n  buildArchOptions() {\n    var arr: any[] = [];\n    var currentArch = \"\";\n    this.props.archData.forEach(row => {\n      if (row[\"Arch\"] && row[\"Arch\"] !== currentArch) {\n        //new row\n        currentArch = row[\"Arch\"];\n        arr.push(\n          <option\n            value={currentArch}>\n            {currentArch}\n          </option>\n        );\n      }\n    })\n    return arr;\n  }\n\n\n\n}\n","import React from 'react';\nimport {\n    Button,\n    Tooltip,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\ninterface IProps {\n    ability: any\n    color: string\n}\n\ninterface IState {\n\n}\n\nexport default class Ability extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n        };\n    }\n\n    render() {\n        var a = this.props.ability as any;\n\n\n        return (\n            <TableBody style={{ backgroundColor: this.props.color }}>\n                <TableRow ><TableCell ><h5 >{a[\"name\"]}</h5></TableCell></TableRow>\n                <TableRow>\n                    <TableCell padding=\"none\">\n                        {a[\"action\"]}\n                    </TableCell>\n                    <TableCell padding=\"none\">\n                        {a[\"atk\"]}\n                    </TableCell>\n                    <TableCell padding=\"none\" >\n                        {a[\"dmg\"] + \" \" + a[\"effect\"]}\n                        {a[\"detail\"] && a[\"detail\"].length > 0 && (\n                            <Tooltip title={a[\"detail\"].replaceAll(\"\\\"\", \"\")} arrow interactive>\n                                <Button>(?)</Button>\n                            </Tooltip>\n                        )}\n                    </TableCell>\n                </TableRow>\n                {a[\"bufflines\"].length > 0 &&\n                    (a[\"bufflines\"] as any[]).map((buff, i) => {\n                        return (\n                            <TableRow>\n                                <TableCell padding=\"none\">\n                                    {buff[\"value\"] +\n                                        \" \" +\n                                        buff[\"effect\"] +\n                                        (buff[\"condition\"].length > 0 ? \" when \" + buff[\"condition\"] : \"\") +\n                                        (buff[\"power\"] === a[\"name\"] ? \"\" : \" from \" + buff[\"power\"])\n                                    }\n                                </TableCell>\n                            </TableRow>)\n                    })}\n            </TableBody>);\n    }\n}","import React from 'react';\nimport {\n    Button,\n    Tooltip,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    TextField,\n    MenuItem,\n    FormControl,\n    InputLabel,\n    Select,\n    Input\n} from '@material-ui/core';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\ninterface IProps {\n    buff: any\n    color: string\n}\n\ninterface IState {\n\n}\n\nexport default class Buff extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n        };\n    }\n\n\n    render() {\n        var b = this.props.buff as any;\n        /*\n            var buff = {\n            power: power[\"Power\"],\n            effect: power[\"Effect\"],\n            value:  power[\"r\" + rank],\n            condition: power[\"Condition\"]\n          }\n        */\n        var text = b.value + \" \" + b.effect;\n        var condition = (b.condition && b.condition.length > 0) ? \" when \" + b.condition : \"\";\n        var byline = \"From \" + b.power;\n\n        return (<div style={{ backgroundColor: this.props.color }}>\n            {text}{condition}\n        <br />\n            <small>{byline}</small>\n        </div>);\n    }\n}","import React from 'react';\nimport {\n    Tooltip,\n    Button,\n    Box\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/Table';\nimport Paper from '@material-ui/core/Paper';\nimport Ability from \"./Ability\";\nimport Buff from \"./Buff\";\n\n\n\n\ninterface IProps {\n    abilities: any[]\n    buffs: any[]\n}\n\ninterface IState {\n\n}\n\nexport default class InfoPanel extends React.Component<IProps, IState> {\n\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            abilityList: [],\n            buffList: []\n        };\n    }\n\n\n    private nameToColor(name: string) {\n        //makes a light color from any string\n\n        //AABBCC RGB\n        //keep each between 00-3F\n        //\n\n        // var code = (Math.abs(this.hashCode(a[\"name\"])).toString(10));\n        // var red = Math.round(Number(code.substr(0, 2)) / 3);\n        // var green = Math.round(Number(code.substr(2, 2)) / 3);\n        // var blue = Math.round(Number(code.substr(4, 2)) / 3);\n        // const color = \"#\" + \n        // ((red < 10) ? \"0\" : \"\") + red + \n        // ((green < 10) ? \"0\" : \"\") + green + \n        // ((blue < 10) ? \"0\" : \"\") + blue;\n\n\n        var h = 0, l = name.length, i = 0;\n        if (l > 0)\n            while (i < l)\n                h = (h << 5) - h + name.charCodeAt(i++) | 0;\n        var code = (Math.abs(h).toString(16));\n        var red = (255 - (Math.round(parseInt(code.substr(0, 2), 16) / 2))).toString(16);\n        var green = (255 - (Math.round(parseInt(code.substr(2, 2), 16) / 2))).toString(16);\n        var blue = (255 - (Math.round(parseInt(code.substr(4, 2), 16) / 2))).toString(16);\n        const color = \"#\" + red + green + blue;\n        return color;\n    }\n    render() {\n\n\n\n\n        var abilityHeaders: string[] = [\n            \"Action\",\n            \"Atk\",\n            \"Effect\"\n        ]\n\n        return (\n            <Box display=\"flex\">\n                <Box minHeight=\"25%\" width=\"30%\" position=\"Left\" display=\"flex\">\n                    <div style={{ width: '500px' }}>\n                        <h3>Attributes</h3>\n                        {this.props.buffs.map((b, i) => {\n                            return (<Buff\n                                key={i}\n                                buff={b}\n                                color={this.nameToColor(b.effect)} />);\n                        })}\n                    </div>\n                </Box>\n                <Box minHeight=\"25%\" width=\"65%\" position=\"right\" display=\"flex\">\n                    <div style={{ width: '800px' }}>\n                        <h3> Abilities</h3>\n\n                        <TableContainer >\n                            <Table aria-label=\"simple table\">\n                                {this.props.abilities.map((a, i) => {\n                                    return (<Ability key={i}\n                                        ability={a}\n                                        color={this.nameToColor(a.name)} />\n                                    )\n                                })}\n                            </Table>\n                        </TableContainer>\n\n                    </div>\n                </Box>\n            </Box >\n        )\n    }\n\n}\n","import React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport ManagePowersPanel from \"./components/ManagePowersPanel\";\nimport ManageArchPanel from \"./components/ManageArchPanel\";\n\nimport InfoPanel from \"./components/InfoPanel\";\n\ninterface IArch {\n  name: string\n  level: number\n  lesserRank: number\n  minorRank: number\n  majorRank: number\n  characterPoints: number\n  trainingPoints: number\n  willDice: number\n}\n\ninterface IState {\n  showManagePowersPanel: boolean\n  showManageArchPanel: boolean\n  selectedPowers: any\n  selectedArch: string\n  level: number\n  powerData: any[]\n  archData: any[]\n  parsedAbilities: any[]\n  parsedBuffs: any[]\n  parsedArch: IArch | null\n}\n\ninterface IProps {\n}\n\nexport default class App extends React.Component<IProps, IState> {\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      showManagePowersPanel: false,\n      showManageArchPanel: false,\n      selectedPowers: {},\n      selectedArch: \"\",\n      level: 1,\n      powerData: [],\n      archData: [],\n      parsedAbilities: [],\n      parsedBuffs: [],\n      parsedArch: null\n    }\n\n  }\n\n  componentDidMount() {\n    let archName = window.localStorage.getItem(\"selectedArch\");\n    let level = window.localStorage.getItem(\"level\");\n    let sp = window.localStorage.getItem(\"selectedPowers\");\n\n    if (archName) {\n      this.setState({\n        selectedArch: archName\n      })\n    }\n    if (level) {\n      this.setState({\n        level: JSON.parse(level)\n      })\n    }\n    if (sp) {\n      this.setState({\n        selectedPowers: JSON.parse(sp)\n      })\n    }\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/powers.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          powerData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n\n    fetch(\"https://raw.githubusercontent.com/aburnettt/adxsheets/master/src/data/arch.csv\")\n      .then((r) => r.text())\n      .then(text => {\n        this.setState({\n          archData: this.csvToJson(text)\n        });\n        this.parseData();\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.archData !== [] &&\n          this.state.powerData !== [] && (\n            <NavBar\n              toggleManagePowers={\n                this.showManagePowersPanel\n              }\n              toggleManageArch={\n                this.showManageArchPanel\n              }\n            />\n          )}\n        <main className=\"container\">\n          {this.state.selectedArch == \"\" ? (<strong>Select an Archetype</strong>) :\n            (<InfoPanel\n              abilities={this.state.parsedAbilities}\n              buffs={this.state.parsedBuffs}\n            />)}\n        </main>\n        {\n          this.state.showManagePowersPanel &&\n          this.state.parsedArch &&\n          (<ManagePowersPanel\n            powerData={this.state.powerData}\n            selectedPowers={this.state.selectedPowers}\n            totalCP={this.state.parsedArch.characterPoints}\n            handleConfirm={(selectedPowers: any) =>\n              this.updateSelectedPowers(selectedPowers)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)}\n        {\n          this.state.showManageArchPanel &&\n          (<ManageArchPanel\n            archData={this.state.archData}\n            selectedArch={this.state.selectedArch}\n            level={this.state.parsedArch ? this.state.parsedArch.level : 1}\n            handleConfirm={(name: string, level: number) =>\n              this.updateSelectedArch(name, level)\n            }\n            handleClose={() => this.closePanels()\n            }\n          />)\n        }\n      </div >\n    );\n  }\n\n  closePanels = () => {\n    this.setState({\n      showManagePowersPanel: false,\n      showManageArchPanel: false\n    })\n  }\n\n  updateSelectedArch(name: string, lev: number) {\n    this.setState({\n      selectedArch: name,\n      level: lev\n    })\n    window.localStorage.setItem(\"selectedArch\", name);\n    window.localStorage.setItem(\"level\", JSON.stringify(lev));\n    this.parseData(this.state.selectedPowers, name, lev);\n    this.closePanels();\n  }\n\n  updateSelectedPowers(selectedPowers: any) {\n    this.setState({\n      selectedPowers: selectedPowers\n    })\n    window.localStorage.setItem(\"selectedPowers\", JSON.stringify(selectedPowers));\n    this.parseData(selectedPowers);\n    this.closePanels();\n  }\n\n  showManagePowersPanel = () => {\n    this.setState({\n      showManagePowersPanel: true\n    }\n    );\n  }\n  showManageArchPanel = () => {\n    this.setState({\n      showManageArchPanel: true\n    }\n    );\n  }\n\n  getRank = (parsedArch: IArch, tier: number) => {\n    switch (tier) {\n      case 1:\n        return (parsedArch.lesserRank);\n      case 2:\n        return (parsedArch.minorRank);\n      case 3:\n        return (parsedArch.majorRank);\n      default:\n        return 0;\n    }\n  }\n\n  //var csv is the CSV file with headers\n  public csvToJson(csv: string) {\n\n    var lines = csv.split(\"\\r\\n\");\n\n    var result = [];\n\n    //todo would be nice to support commas in data\n    //by skipping escaped commas\n    var headers = lines[0].split(\",\");\n\n    for (var i = 1; i < lines.length; i++) {\n\n      var obj: any = {};\n      var currentline = lines[i].split(\",\");\n\n      for (var j = 0; j < headers.length; j++) {\n        obj[headers[j]] = currentline[j];\n      }\n\n      result.push(obj);\n\n    }\n\n    return result;\n    //return JSON.stringify(result); //JSON\n  }\n\n\n\n  private parseData(sp: any = this.state.selectedPowers, selectedArch: string = this.state.selectedArch, level: number = this.state.level) {\n    if (selectedArch === \"\" ||\n      level === 0 ||\n      this.state.archData === [] ||\n      this.state.powerData === []\n    ) {\n      return;\n    }\n\n    var parsedArch: IArch = {\n      characterPoints: 0,\n      lesserRank: 0,\n      level: level,\n      majorRank: 0,\n      minorRank: 0,\n      name: selectedArch,\n      trainingPoints: 0,\n      willDice: 0\n    }\n\n    this.state.archData.forEach(function (row) {\n      if (row[\"Arch\"] === selectedArch) {\n        var val = row[\"Level \" + level];\n        var detail = row[\"Detail\"];\n        //todo - add detail to parsedArch\n        switch (row[\"Row\"]) {\n          case \"CP\":\n            parsedArch.characterPoints = val;\n            break;\n          case \"TP\":\n            parsedArch.trainingPoints = val;\n            break;\n          case \"Major\":\n            parsedArch.majorRank = val;\n            break;\n          case \"Minor\":\n            parsedArch.minorRank = val;\n            break;\n          case \"Lesser\":\n            parsedArch.lesserRank = val;\n            break;\n          case \"Will Dice\":\n            parsedArch.willDice = val;\n            break;\n          default:\n          //do nothing\n        }\n      }\n    });\n\n//digest stats\n\n\n\n    var abilities: any[] = [];\n    var passiveBuffs: any[] = [];\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0 &&\n        parsedArch) {\n        var rank = this.getRank(parsedArch, sp[power[\"Power\"]]);\n        if (power[\"Row\"] === \"Ability\") {\n          var ability = {\n            \"name\": power[\"Power\"],\n            \"action\": power[\"Action\"],\n            \"dmg\": power[\"r\" + rank],\n            \"atk\": \"1d20\",\n            \"effect\": power[\"Effect\"],\n            \"detail\": power[\"Detail\"],\n            \"tags\": ((power[\"Tags\"].length > 0) ? (power[\"Tags\"].split(\" \")) : []),\n            \"condition\": power[\"Condition\"],\n            \"bufflines\": []\n          };\n\n          abilities.push(ability);\n        }\n      }\n    });\n\n    //loop through again, looking for buffs\n    //B: all buffs that apply to abilities will appear as a buffline below the ability\n    // loop through buffs. for each, loop through abilities looking for tags\n    // if a tag exists, add a buffline. Also update atk/effect fields\n    // left side still shows universal buffs\n\n    this.state.powerData.forEach(power => {\n      if (sp[power[\"Power\"]] &&\n        sp[power[\"Power\"]] > 0 &&\n        parsedArch) {\n        var rank = this.getRank(parsedArch, sp[power[\"power\"]]);\n\n        if (power[\"Row\"] === \"Buff\") {\n          var tags: string[] = power[\"Tags\"].split(\" \");\n          var buff = {\n            power: power[\"Power\"],\n            effect: power[\"Effect\"],\n            value:  power[\"r\" + rank],\n            condition: power[\"Condition\"],\n            detail: power[\"Detail\"],\n            tags: (power[\"Tags\"].length > 0) ? (power[\"Tags\"].split(\" \")) : []\n          }\n          //if there is a passive tag\n          if (buff.tags.includes(\"passive\")) {\n            passiveBuffs.push(buff);\n          }\n          abilities.map((a, i) => {\n            if (a[\"name\"] === buff.power){\n              a[\"bufflines\"].push(buff);\n            }else if (a[\"tags\"].length > 0) {\n              var aTags: string[] = a[\"tags\"];\n              aTags.forEach(tag => {\n                if (tags.includes(tag)) {\n                  switch (buff.effect) {\n                    case \"Priority\":\n                      a[\"atk\"] = buff.value;\n                      break;\n                    case \"ATK\":\n                      a[\"atk\"] += \"+\" + buff.value;\n                      break;\n                    case \"DMG\":\n                      a[\"dmg\"] += \"+\" + buff.value;\n                      break;\n                    default:\n                      //do nothing, buffline will convey meaning\n                      break;\n                  }\n                  a[\"bufflines\"].push(buff);\n                }\n              });\n            }\n          })\n        }\n      }\n    });\n\n\n\n    this.setState({\n      parsedAbilities: abilities,\n      parsedBuffs: passiveBuffs,\n      parsedArch: parsedArch\n    })\n\n\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}